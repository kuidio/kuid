/*
Copyright 2024 Nokia.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kuidio/kuid/apis/infra/v1alpha1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/listers"
	"k8s.io/client-go/tools/cache"
)

// LinkSetLister helps list LinkSets.
// All objects returned here must be treated as read-only.
type LinkSetLister interface {
	// List lists all LinkSets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LinkSet, err error)
	// LinkSets returns an object that can list and get LinkSets.
	LinkSets(namespace string) LinkSetNamespaceLister
	LinkSetListerExpansion
}

// linkSetLister implements the LinkSetLister interface.
type linkSetLister struct {
	listers.ResourceIndexer[*v1alpha1.LinkSet]
}

// NewLinkSetLister returns a new LinkSetLister.
func NewLinkSetLister(indexer cache.Indexer) LinkSetLister {
	return &linkSetLister{listers.New[*v1alpha1.LinkSet](indexer, v1alpha1.Resource("linkset"))}
}

// LinkSets returns an object that can list and get LinkSets.
func (s *linkSetLister) LinkSets(namespace string) LinkSetNamespaceLister {
	return linkSetNamespaceLister{listers.NewNamespaced[*v1alpha1.LinkSet](s.ResourceIndexer, namespace)}
}

// LinkSetNamespaceLister helps list and get LinkSets.
// All objects returned here must be treated as read-only.
type LinkSetNamespaceLister interface {
	// List lists all LinkSets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LinkSet, err error)
	// Get retrieves the LinkSet from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.LinkSet, error)
	LinkSetNamespaceListerExpansion
}

// linkSetNamespaceLister implements the LinkSetNamespaceLister
// interface.
type linkSetNamespaceLister struct {
	listers.ResourceIndexer[*v1alpha1.LinkSet]
}
