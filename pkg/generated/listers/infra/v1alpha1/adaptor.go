/*
Copyright 2024 Nokia.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kuidio/kuid/apis/infra/v1alpha1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/listers"
	"k8s.io/client-go/tools/cache"
)

// AdaptorLister helps list Adaptors.
// All objects returned here must be treated as read-only.
type AdaptorLister interface {
	// List lists all Adaptors in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Adaptor, err error)
	// Adaptors returns an object that can list and get Adaptors.
	Adaptors(namespace string) AdaptorNamespaceLister
	AdaptorListerExpansion
}

// adaptorLister implements the AdaptorLister interface.
type adaptorLister struct {
	listers.ResourceIndexer[*v1alpha1.Adaptor]
}

// NewAdaptorLister returns a new AdaptorLister.
func NewAdaptorLister(indexer cache.Indexer) AdaptorLister {
	return &adaptorLister{listers.New[*v1alpha1.Adaptor](indexer, v1alpha1.Resource("adaptor"))}
}

// Adaptors returns an object that can list and get Adaptors.
func (s *adaptorLister) Adaptors(namespace string) AdaptorNamespaceLister {
	return adaptorNamespaceLister{listers.NewNamespaced[*v1alpha1.Adaptor](s.ResourceIndexer, namespace)}
}

// AdaptorNamespaceLister helps list and get Adaptors.
// All objects returned here must be treated as read-only.
type AdaptorNamespaceLister interface {
	// List lists all Adaptors in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Adaptor, err error)
	// Get retrieves the Adaptor from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Adaptor, error)
	AdaptorNamespaceListerExpansion
}

// adaptorNamespaceLister implements the AdaptorNamespaceLister
// interface.
type adaptorNamespaceLister struct {
	listers.ResourceIndexer[*v1alpha1.Adaptor]
}
