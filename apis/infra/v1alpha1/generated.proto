/*
Copyright 2024 Nokia.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package github.com.kuidio.kuid.apis.infra.v1alpha1;

import "github.com/kform-dev/choreo/apis/condition/v1alpha1/generated.proto";
import "github.com/kuidio/kuid/apis/common/v1alpha1/generated.proto";
import "github.com/kuidio/kuid/apis/id/v1alpha1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "github.com/kuidio/kuid/apis/infra/v1alpha1";

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:storageversion
// +kubebuilder:subresource:status
// +kubebuilder:resource:categories={kuid}
// An Adaptor represents a communication interface or connection point within a Node,
// facilitating network communication and data transfer between different components
// or systems within the environment. `Adaptors` serve as gateways for transmitting and
// receiving data, enabling seamless communication between Nodes.
// +k8s:openapi-gen=true
message Adaptor {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional AdaptorSpec spec = 2;

  optional AdaptorStatus status = 3;
}

// AdaptorList contains a list of Adaptors
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message AdaptorList {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Adaptor items = 2;
}

// AdaptorSpec defines the desired state of Adaptor
message AdaptorSpec {
  // NodeGroupAdaptorID identifies the Adaptor identity this resource belongs to
  optional .github.com.kuidio.kuid.apis.id.v1alpha1.PartitionAdaptorID nodeGroupAdaptorID = 1;

  // UserDefinedLabels define metadata to the resource.
  // defined in the spec to distingiush metadata labels from user defined labels
  optional .github.com.kuidio.kuid.apis.common.v1alpha1.UserDefinedLabels userDefinedLabels = 3;
}

// AdaptorStatus defines the observed state of Adaptor
message AdaptorStatus {
  // ConditionedStatus provides the status of the IPClain using conditions
  // - a ready condition indicates the overall status of the resource
  optional .github.com.kform_dev.choreo.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1;
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:storageversion
// +kubebuilder:subresource:status
// +kubebuilder:resource:categories={kuid}
// A Cluster represents a kubernetes cluster and is typically used as a nodeGroup identifier.
message Cluster {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ClusterSpec spec = 2;

  optional ClusterStatus status = 3;
}

// ClusterList contains a list of Clusters
message ClusterList {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Cluster items = 2;
}

// ClusterSpec defines the desired state of Cluster
message ClusterSpec {
  // PartitionClusterID defines the cluster partition
  optional .github.com.kuidio.kuid.apis.id.v1alpha1.PartitionClusterID nodeID = 1;

  // Provider defines the provider implementing this resource.
  optional string provider = 2;

  // Location defines the location information where this resource is located
  // in lon/lat coordinates
  optional Location location = 3;

  // UserDefinedLabels define metadata to the resource.
  // defined in the spec to distingiush metadata labels from user defined labels
  optional .github.com.kuidio.kuid.apis.common.v1alpha1.UserDefinedLabels userDefinedLabels = 4;
}

// ClusterStatus defines the observed state of Cluster
message ClusterStatus {
  // ConditionedStatus provides the status of the IPClain using conditions
  // - a ready condition indicates the overall status of the resource
  optional .github.com.kform_dev.choreo.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1;
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:storageversion
// +kubebuilder:subresource:status
// +kubebuilder:resource:categories={kuid}
// An Endpoint represents a communication interface or connection point within a Node,
// facilitating network communication and data transfer between different components
// or systems within the environment. `Endpoints` serve as gateways for transmitting and
// receiving data, enabling seamless communication between Nodes.
// +k8s:openapi-gen=true
message Endpoint {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional EndpointSpec spec = 2;

  optional EndpointStatus status = 3;
}

// EndpointList contains a list of Endpoints
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message EndpointList {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Endpoint items = 2;
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:storageversion
// +kubebuilder:subresource:status
// +kubebuilder:resource:categories={kuid}
// A EndpointSet represents a set of endpoints that belong together within a nodeGroup.
// E.g. it can be used to model a logical Link Aggregation group within
// a node or it can be used to represent a logical multi-homing construction
// between a set of nodes belonging to a single nodeGroup.
// +k8s:openapi-gen=true
message EndpointSet {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional EndpointSetSpec spec = 2;

  optional EndpointSetStatus status = 3;
}

// EndpointSetList contains a list of EndpointSets
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message EndpointSetList {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated EndpointSet items = 2;
}

// EndpointSetSpec defines the desired state of EndpointSet
// An EndpointSet can be a LAG (single Homed) or ESI (multiHomed). The EndpointSet
// can only belong to a single NodeGroup
message EndpointSetSpec {
  // Endpoints defines the Endpoints that are part of the EndpointSet
  // Min 1, Max 16
  repeated .github.com.kuidio.kuid.apis.id.v1alpha1.PartitionEndpointID endpoints = 1;

  // Lacp defines if the lag enabled LACP
  // +optional
  optional bool lacp = 2;

  // UserDefinedLabels define metadata to the resource.
  // defined in the spec to distingiush metadata labels from user defined labels
  optional .github.com.kuidio.kuid.apis.common.v1alpha1.UserDefinedLabels userDefinedLabels = 3;
}

// EndpointSetStatus defines the observed state of EndpointSet
message EndpointSetStatus {
  // ConditionedStatus provides the status of the IPClain using conditions
  // - a ready condition indicates the overall status of the resource
  optional .github.com.kform_dev.choreo.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1;

  // ESI defines the ethernet segment identifier of the logical link
  // if set this is a multi-homed logical endpoint
  // the ESI is a global unique identifier within the administrative domain
  // +optional
  optional uint32 esi = 2;

  // LagId defines the lag id for the logical single-homed or multi-homed
  // endpoint
  // +optional
  optional uint32 lagID = 3;
}

// EndpointSpec defines the desired state of Endpoint
message EndpointSpec {
  // NodeGroupEndpointID identifies the endpoint identity this resource belongs to
  optional .github.com.kuidio.kuid.apis.id.v1alpha1.PartitionEndpointID nodeGroupEndpointID = 1;

  // UserDefinedLabels define metadata to the resource.
  // defined in the spec to distingiush metadata labels from user defined labels
  optional .github.com.kuidio.kuid.apis.common.v1alpha1.UserDefinedLabels userDefinedLabels = 3;

  // (Gbps)
  optional string speed = 4;

  // VLANTagging defines if VLAN tagging is enabled or disabled on the interface
  optional bool vlanTagging = 5;
}

// EndpointStatus defines the observed state of Endpoint
message EndpointStatus {
  // ConditionedStatus provides the status of the IPClain using conditions
  // - a ready condition indicates the overall status of the resource
  optional .github.com.kform_dev.choreo.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1;
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:storageversion
// +kubebuilder:subresource:status
// +kubebuilder:resource:categories={kuid}
// A link represents a physical/logical connection that enables communication and data transfer
// between 2 endpoints of a node.
// +k8s:openapi-gen=true
message Link {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional LinkSpec spec = 2;

  optional LinkStatus status = 3;
}

// LinkList contains a list of Links
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message LinkList {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Link items = 2;
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:storageversion
// +kubebuilder:subresource:status
// +kubebuilder:resource:categories={kuid}
// A linkSet represents a set of links that belong together within a node group or accross nodeGroups.
// E.g. it can be used to model a logical Link Aggregation group between 2 nodes or
// it can be used to represent a logical multi-homing construction between a set of nodes
// belonging to 1 or multiple nodeGroups/Topologies.
// +k8s:openapi-gen=true
message LinkSet {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional LinkSetSpec spec = 2;

  optional LinkSetStatus status = 3;
}

// LinkSetList contains a list of LinkSets
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message LinkSetList {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated LinkSet items = 2;
}

// LinkSetSpec defines the desired state of LinkSet
message LinkSetSpec {
  // Endpoints define the endpoint identifiers of the LinkSet
  repeated .github.com.kuidio.kuid.apis.id.v1alpha1.PartitionEndpointID endpoints = 1;

  // UserDefinedLabels define metadata to the resource.
  // defined in the spec to distingiush metadata labels from user defined labels
  optional .github.com.kuidio.kuid.apis.common.v1alpha1.UserDefinedLabels userDefinedLabels = 2;
}

// LinkSetStatus defines the observed state of LinkSet
message LinkSetStatus {
  // ConditionedStatus provides the status of the IPClain using conditions
  // - a ready condition indicates the overall status of the resource
  optional .github.com.kform_dev.choreo.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1;

  // ESI defines the ethernet segment identifier of the logical link
  // if set this is a multi-homed linkset
  // the ESI is a global unique identifier within the administrative domain/topology
  optional uint32 esi = 2;

  // LagId defines the lag id for the logical single-homed or multi-homed
  // endpoint
  optional uint32 lagId = 3;
}

// LinkSpec defines the desired state of Link
message LinkSpec {
  // Internal indicated if the link is internal to the topology
  optional bool internal = 1;

  // Endpoints define the 2 endpoint identifiers of the link
  // Can only have 2 endpoints
  repeated .github.com.kuidio.kuid.apis.id.v1alpha1.PartitionEndpointID endpoints = 2;

  // UserDefinedLabels define metadata to the resource.
  // defined in the spec to distingiush metadata labels from user defined labels
  optional .github.com.kuidio.kuid.apis.common.v1alpha1.UserDefinedLabels userDefinedLabels = 3;

  // BFD defines the BFD specific parameters on the link
  // +optional
  optional BFDLinkParameters bfd = 4;

  // OSPF defines the OSPF specific parameters on the link
  // +optional
  optional OSPFLinkParameters ospf = 5;

  // ISIS defines the ISIS specific parameters on the link
  // +optional
  optional ISISLinkParameters isis = 6;

  // BGP defines the BGP specific parameters on the link
  // +optional
  optional BGPLinkParameters bgp = 7;
}

// LinkStatus defines the observed state of Link
message LinkStatus {
  // ConditionedStatus provides the status of the IPClain using conditions
  // - a ready condition indicates the overall status of the resource
  optional .github.com.kform_dev.choreo.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1;
}

message Location {
  optional string latitude = 1;

  optional string longitude = 2;
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:storageversion
// +kubebuilder:subresource:status
// +kubebuilder:resource:categories={kuid}
// A module refers to a hardware component or expansion module that can be installed within a ModuleBay of a Node.
// Modules provide additional functionality and capabilities to the infrastructure environment,
// allowing users to enhance and customize their deployments according to specific requirements.
// +k8s:openapi-gen=true
message Module {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ModuleSpec spec = 2;

  optional ModuleStatus status = 3;
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:storageversion
// +kubebuilder:subresource:status
// +kubebuilder:resource:categories={kuid}
// A ModuleBay serves as a modular slot or enclosure within a Node, designed to accommodate additional modules.
// ModuleBays provide a flexible and scalable approach to extending the capabilities of Nodes,
// allowing users to customize and enhance their infrastructure deployments according to specific requirements.
// +k8s:openapi-gen=true
message ModuleBay {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ModuleBaySpec spec = 2;

  optional ModuleBayStatus status = 3;
}

// ModuleBayList contains a list of ModuleBays
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message ModuleBayList {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated ModuleBay items = 2;
}

// ModuleBaySpec defines the desired state of ModuleBay
message ModuleBaySpec {
  // NodeID identifies the node identity this resource belongs to
  optional .github.com.kuidio.kuid.apis.id.v1alpha1.PartitionNodeID nodeID = 1;

  // Position defines the position in the node the moduleBay is deployed
  optional int64 psoition = 2;

  // UserDefinedLabels define metadata to the resource.
  // defined in the spec to distingiush metadata labels from user defined labels
  optional .github.com.kuidio.kuid.apis.common.v1alpha1.UserDefinedLabels userDefinedLabels = 3;
}

// ModuleBayStatus defines the observed state of ModuleBay
message ModuleBayStatus {
  // ConditionedStatus provides the status of the IPClain using conditions
  // - a ready condition indicates the overall status of the resource
  optional .github.com.kform_dev.choreo.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1;
}

// ModuleList contains a list of Modules
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message ModuleList {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Module items = 2;
}

// ModuleSpec defines the desired state of Module
message ModuleSpec {
  // NodeID identifies the node identity this resource belongs to
  optional .github.com.kuidio.kuid.apis.id.v1alpha1.PartitionNodeID nodeID = 1;

  // ModuelBay defines the bay in which the module is deployed
  optional int64 moduleBay = 2;

  // UserDefinedLabels define metadata to the resource.
  // defined in the spec to distingiush metadata labels from user defined labels
  optional .github.com.kuidio.kuid.apis.common.v1alpha1.UserDefinedLabels userDefinedLabels = 3;
}

// ModuleStatus defines the observed state of Module
message ModuleStatus {
  // ConditionedStatus provides the status of the IPClain using conditions
  // - a ready condition indicates the overall status of the resource
  optional .github.com.kform_dev.choreo.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1;
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:storageversion
// +kubebuilder:subresource:status
// +kubebuilder:resource:categories={kuid}
// A Node represents a fundamental unit that implements compute, storage, and/or networking within your environment.
// Nodes can embody physical, virtual, or containerized entities, offering versatility in deployment options to suit
// diverse infrastructure requirements.
// Nodes are logically organized within racks and sites/regions, establishing a hierarchical structure for efficient
// resource management and organization. Additionally, Nodes are associated with nodeGroups, facilitating centralized
// management and control within defined administrative boundaries.
// Each Node is assigned a provider, representing the entity responsible for implementing the specifics of the Node.
// +k8s:openapi-gen=true
message Node {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional NodeSpec spec = 2;

  optional NodeStatus status = 3;
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:storageversion
// +kubebuilder:subresource:status
// +kubebuilder:resource:categories={kuid}
// A NodeItem represents a specific hardware component or accessory associated with a Node.
// NodeItems represent a wide range of hardware elements, e.g Fan(s), PowerUnit(s), CPU(s),
// and other peripheral devices essential for the operation of the Node.
// NodeItem is used to represent the modular components of a node.
// +k8s:openapi-gen=true
message NodeItem {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional NodeItemSpec spec = 2;

  optional NodeItemStatus status = 3;
}

// NodeItemList contains a list of NodeItems
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message NodeItemList {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated NodeItem items = 2;
}

// NodeItemSpec defines the desired state of NodeItem
message NodeItemSpec {
  // NodeID identifies the node identity this resource belongs to
  optional .github.com.kuidio.kuid.apis.id.v1alpha1.PartitionNodeID nodeID = 1;

  // UserDefinedLabels define metadata to the resource.
  // defined in the spec to distingiush metadata labels from user defined labels
  optional .github.com.kuidio.kuid.apis.common.v1alpha1.UserDefinedLabels userDefinedLabels = 2;
}

// NodeItemStatus defines the observed state of NodeItem
message NodeItemStatus {
  // ConditionedStatus provides the status of the IPClain using conditions
  // - a ready condition indicates the overall status of the resource
  optional .github.com.kform_dev.choreo.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1;
}

// NodeList contains a list of Nodes
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message NodeList {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Node items = 2;
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:storageversion
// +kubebuilder:subresource:status
// +kubebuilder:resource:categories={kuid}
// A NodeSet represents a set of nodes.
// E.g. it can be used to model a set of nodes in a NodeSet that share the same
// charecteristics wrt, Numa, interfaces, etc.
// Another usage of NodeSet is the representation of a virtual Node that consists of multiple nodes.
// +k8s:openapi-gen=true
message NodeSet {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional NodeSetSpec spec = 2;

  optional NodeSetStatus status = 3;
}

// NodeSetList contains a list of NodeSets
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message NodeSetList {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated NodeSet items = 2;
}

// NodeSetSetSpec defines the desired state of NodeSet
message NodeSetSpec {
  optional string nodeSet = 1;

  // PartitionClusterID defines the cluster partition
  optional .github.com.kuidio.kuid.apis.id.v1alpha1.PartitionClusterID nodeID = 2;

  // UserDefinedLabels define metadata to the resource.
  // defined in the spec to distingiush metadata labels from user defined labels
  optional .github.com.kuidio.kuid.apis.common.v1alpha1.ClaimLabels userDefinedLabels = 3;
}

// NodeSetStatus defines the observed state of NodeSet
message NodeSetStatus {
  // ConditionedStatus provides the status of the IPClain using conditions
  // - a ready condition indicates the overall status of the resource
  optional .github.com.kform_dev.choreo.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1;
}

// NodeSpec defines the desired state of Node
message NodeSpec {
  // NodeGroupNodeID identifies the nodeGroup identity this resource belongs to
  optional .github.com.kuidio.kuid.apis.id.v1alpha1.PartitionNodeID nodeID = 1;

  // Rack defines the rack in which the node is deployed
  // +optional
  optional string rack = 2;

  // relative position in the rack
  // +optional
  optional string position = 3;

  // Location defines the location information where this resource is located
  // in lon/lat coordinates
  // +optional
  optional Location location = 4;

  // Provider defines the provider implementing this resource.
  optional string provider = 5;

  // PlatformType define the type of platform implementing the nodespec
  optional string platformType = 6;

  // Version define the SW version of the node
  optional string version = 7;

  // UserDefinedLabels define metadata to the resource.
  // defined in the spec to distingiush metadata labels from user defined labels
  optional .github.com.kuidio.kuid.apis.common.v1alpha1.UserDefinedLabels userDefinedLabels = 8;
}

// NodeStatus defines the observed state of Node
message NodeStatus {
  // ConditionedStatus provides the status of the IPClain using conditions
  // - a ready condition indicates the overall status of the resource
  optional .github.com.kform_dev.choreo.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1;

  // System ID define the unique system id of the node
  // +optional
  optional string systemID = 2;
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:storageversion
// +kubebuilder:subresource:status
// +kubebuilder:resource:categories={kuid}
message Partition {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional PartitionSpec spec = 2;

  optional PartitionStatus status = 3;
}

// PartitionList contains a list of Partitions
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message PartitionList {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Partition items = 2;
}

// PartitionSpec defines the desired state of the partition
message PartitionSpec {
  // UserDefinedLabels define metadata to the resource.
  // defined in the spec to distingiush metadata labels from user defined labels
  optional .github.com.kuidio.kuid.apis.common.v1alpha1.UserDefinedLabels userDefinedLabels = 7;
}

// PartitionStatus defines the observed state of Partition
message PartitionStatus {
  // ConditionedStatus provides the status of the IPClain using conditions
  // - a ready condition indicates the overall status of the resource
  optional .github.com.kform_dev.choreo.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1;
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:storageversion
// +kubebuilder:subresource:status
// +kubebuilder:resource:categories={kuid}
// An Port represents a communication interface or connection point within a Node,
// facilitating network communication and data transfer between different components
// or systems within the environment. `Ports` serve as gateways for transmitting and
// receiving data, enabling seamless communication between Nodes.
// +k8s:openapi-gen=true
message Port {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional PortSpec spec = 2;

  optional PortStatus status = 3;
}

// PortList contains a list of Ports
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message PortList {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Port items = 2;
}

// PortSpec defines the desired state of Port
message PortSpec {
  // PartitionPortID the Port identity this resource belongs to
  optional .github.com.kuidio.kuid.apis.id.v1alpha1.PartitionPortID partitionPortID = 1;

  // UserDefinedLabels define metadata to the resource.
  // defined in the spec to distingiush metadata labels from user defined labels
  optional .github.com.kuidio.kuid.apis.common.v1alpha1.UserDefinedLabels userDefinedLabels = 3;
}

// PortStatus defines the observed state of Port
message PortStatus {
  // ConditionedStatus provides the status of the IPClain using conditions
  // - a ready condition indicates the overall status of the resource
  optional .github.com.kform_dev.choreo.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1;
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:storageversion
// +kubebuilder:subresource:status
// +kubebuilder:resource:categories={kuid}
// A rack represents a physical equipment rack within your environment. Each rack is designed to accommodate
// the installation of devices and equipment.
message Rack {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional RackSpec spec = 2;

  optional RackStatus status = 3;
}

// RackList contains a list of Racks
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message RackList {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Rack items = 2;
}

// RackSpec defines the desired state of Rack
message RackSpec {
  // SiteID identifies the siteID this resource belongs to
  optional .github.com.kuidio.kuid.apis.id.v1alpha1.SiteID siteID = 1;

  // Location defines the location information where this resource is located
  // in lon/lat coordinates
  optional Location location = 2;

  // The height of the rack, measured in units.
  optional string height = 3;

  // The canonical distance between the two vertical rails on a face. In inch
  optional string width = 4;

  // UserDefinedLabels define metadata to the resource.
  // defined in the spec to distingiush metadata labels from user defined label
  optional .github.com.kuidio.kuid.apis.common.v1alpha1.UserDefinedLabels userDefinedLabels = 5;
}

// RackStatus defines the observed state of Rack
message RackStatus {
  // ConditionedStatus provides the status of the IPClain using conditions
  // - a ready condition indicates the overall status of the resource
  optional .github.com.kform_dev.choreo.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1;
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:storageversion
// +kubebuilder:subresource:status
// +kubebuilder:resource:categories={kuid}
// A region represent a geography in which multiple infrastructure resources are grouped
// A region might represent a continent, country, city, campus, or other area depending on your environment.
message Region {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional RegionSpec spec = 2;

  optional RegionStatus status = 3;
}

// RegionList contains a list of Regions
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message RegionList {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Region items = 2;
}

// RegionSpec defines the desired state of Region
message RegionSpec {
  // UserDefinedLabels define metadata to the resource.
  // defined in the spec to distingiush metadata labels from user defined labels
  optional .github.com.kuidio.kuid.apis.common.v1alpha1.UserDefinedLabels userDefinedLabels = 1;
}

// RegionStatus defines the observed state of Region
message RegionStatus {
  // ConditionedStatus provides the status of the IPClain using conditions
  // - a ready condition indicates the overall status of the resource
  optional .github.com.kform_dev.choreo.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1;
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:storageversion
// +kubebuilder:subresource:status
// +kubebuilder:resource:categories={kuid}
// A site serves as a fundamental organizational unit for managing infrastructure resources within your environment.
// The utilization of sites may vary based on the organizational structure and requirements,
// but in essence, each site typically corresponds to a distinct building or campus.
message Site {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional SiteSpec spec = 2;

  optional SiteStatus status = 3;
}

// SiteList contains a list of Sites
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message SiteList {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Site items = 2;
}

// SiteSpec defines the desired state of Site
message SiteSpec {
  // SiteID defines the siteID
  optional .github.com.kuidio.kuid.apis.id.v1alpha1.SiteID siteID = 1;

  // Location defines the location information where this resource is located
  // in lon/lat coordinates
  optional Location location = 2;

  // UserDefinedLabels define metadata to the resource.
  // defined in the spec to distingiush metadata labels from user defined labels
  optional .github.com.kuidio.kuid.apis.common.v1alpha1.UserDefinedLabels userDefinedLabels = 3;
}

// SiteStatus defines the observed state of Site
message SiteStatus {
  // ConditionedStatus provides the status of the IPClain using conditions
  // - a ready condition indicates the overall status of the resource
  optional .github.com.kform_dev.choreo.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1;
}

message BFDLinkParameters {
  // Disabled defines if bfd is disabled or not
  // +optional
  optional bool enabled = 1;

  // MinTx defines the desired minimal interval for sending BFD packets, in msec.
  // +optional
  optional uint32 minTx = 2;

  // MinTx defines the required minimal interval for receiving BFD packets, in msec.
  // +optional
  optional uint32 minRx = 3;

  // MinEchoRx defines the echo function timer, in msec.
  // +optional
  optional uint32 minEchoRx = 4;

  // Multiplier defines the number of missed packets before the session is considered down
  // +optional
  optional uint32 multiplier = 5;

  // TTL defines the time to live on the outgoing BFD packet
  // +kubebuilder:validation:Maximum:=255
  // +kubebuilder:validation:Minimum:=2
  // +optional
  optional uint32 ttl = 6;
}

message BGPLinkParameters {
  // BFD defines if BFD is enabled for the EGP on this interface
  // +kubebuilder:default:=true
  // +optional
  optional bool bfd = 1;
}

message IGPLinkParameters {
  // Type defines the type of network
  // +kubebuilder:validation:Enum=`pointToPoint`;`broadcast`;
  // +kubebuilder:default=pointToPoint
  // +optional
  optional string networkType = 1;

  // Passive defines if this interface is passive
  // +optional
  optional bool passive = 2;

  // BFD defines if BFD is enabled for the IGP on this interface
  // +kubebuilder:default:=true
  // +optional
  optional bool bfd = 3;

  // Metric defines the interface metric associated with the native routing topology
  // +optional
  optional uint32 metric = 4;
}

message ISISLinkParameters {
  // Generic IGP Link Parameters
  // +optional
  optional IGPLinkParameters igpLinkParameters = 1;

  // Defines the ISIS level the link is assocaited with
  // +optional
  optional string area = 2;
}

message OSPFLinkParameters {
  // Generic IGP Link Parameters
  // +optional
  optional IGPLinkParameters igpLinkParameters = 1;

  // Defines the OSPF area the link is assocaited with
  // +optional
  optional string area = 2;
}

