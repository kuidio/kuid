/*
Copyright 2024 Nokia.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package github.com.kuidio.kuid.apis.backend.vxlan.v1alpha1;

import "github.com/kuidio/kuid/apis/common/v1alpha1/generated.proto";
import "github.com/kuidio/kuid/apis/condition/v1alpha1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "github.com/kuidio/kuid/apis/backend/vxlan/v1alpha1";

// VXLANClaim is the Schema for the VXLANClaim API
//
// +k8s:openapi-gen=true
message VXLANClaim {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional VXLANClaimSpec spec = 2;

  optional VXLANClaimStatus status = 3;
}

// VXLANClaimList contains a list of VXLANClaims
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message VXLANClaimList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated VXLANClaim items = 2;
}

// VXLANClaimSpec defines the desired state of VXLANClaim
message VXLANClaimSpec {
  // VXLANIndex defines the VXLAN index for the VXLAN Claim
  optional string index = 1;

  // VXLANID defines the VXLAN for the VXLAN claim
  optional uint32 id = 2;

  // Range defines the VXLAN range for the VXLAN claim
  // The following notation is used: start-end <start-VXLANID>-<end-VXLANID>
  // the VXLANs in the range must be consecutive
  optional string range = 3;

  // ClaimLabels define the user defined labels and selector labels used
  // in resource claim
  optional github.com.kuidio.kuid.apis.common.v1alpha1.ClaimLabels claimLabels = 4;

  // Owner defines the ownerReference of the VXLANClaim
  // Allow for different namesapces, hence it is part of the spec
  optional github.com.kuidio.kuid.apis.common.v1alpha1.OwnerReference owner = 5;
}

// VXLANClaimStatus defines the observed state of VXLANClaim
message VXLANClaimStatus {
  // ConditionedStatus provides the status of the IPClain using conditions
  // - a ready condition indicates the overall status of the resource
  optional github.com.kuidio.kuid.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1;

  // VXLANID defines the VXLAN for the VXLAN claim
  // +optional
  optional uint32 id = 2;

  // VXLANRange defines the VXLAN range for the VXLAN claim
  // +optional
  optional string range = 3;

  // ExpiryTime defines when the claim expires
  // +kubebuilder:validation:Optional
  // +optional
  optional string expiryTime = 4;
}

message VXLANDynamicIDSyntaxValidator {
}

// VXLANEntry is the Schema for the VXLANentry API
//
// +k8s:openapi-gen=true
message VXLANEntry {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional VXLANEntrySpec spec = 2;

  optional VXLANEntryStatus status = 3;
}

// VXLANEntryList contains a list of VXLANEntries
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message VXLANEntryList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated VXLANEntry items = 2;
}

// VXLANEntrySpec defines the desired state of VXLANEntry
message VXLANEntrySpec {
  // VXLANIndex defines the VXLAN index for the VXLAN Claim
  optional string index = 1;

  // ClaimType defines the claimType of the VXLAN Entry
  optional string claimType = 2;

  // ID defines the id of the VXLAN entry in the tree
  optional string id = 3;

  // ClaimLabels define the user defined labels and selector labels used
  // in resource claim
  optional github.com.kuidio.kuid.apis.common.v1alpha1.ClaimLabels claimLabels = 4;

  // Claim defines the name of the claim that is the origin of this  entry
  optional string claim = 5;

  // Owner defines the ownerReference of the VXLANClaim
  // Allow for different namesapces, hence it is part of the spec
  optional github.com.kuidio.kuid.apis.common.v1alpha1.OwnerReference owner = 6;
}

// VXLANEntryStatus defines the observed state of VXLANEntry
message VXLANEntryStatus {
  // ConditionedStatus provides the status of the VXLANEntry using conditions
  // - a ready condition indicates the overall status of the resource
  optional github.com.kuidio.kuid.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1;
}

// VXLANIndex is the Schema for the VXLANIndex API
//
// +k8s:openapi-gen=true
message VXLANIndex {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional VXLANIndexSpec spec = 2;

  optional VXLANIndexStatus status = 3;
}

// VXLANIndexList contains a list of VXLANIndexs
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message VXLANIndexList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated VXLANIndex items = 2;
}

// VXLANIndexSpec defines the desired state of VXLANIndex
message VXLANIndexSpec {
  // MinID defines the min ID the index supports
  // +optional
  optional uint32 minID = 1;

  // MaxID defines the max ID the index supports
  // +optional
  optional uint32 maxID = 2;

  // UserDefinedLabels define metadata to the resource.
  // defined in the spec to distingiush metadata labels from user defined labels
  optional github.com.kuidio.kuid.apis.common.v1alpha1.UserDefinedLabels userDefinedLabels = 3;
}

// VXLANIndexStatus defines the observed state of VXLANIndex
message VXLANIndexStatus {
  // MinID defines the min ID the index is configured with
  // +optional
  optional uint32 minID = 1;

  // MaxID defines the max ID the index is configured with
  // +optional
  optional uint32 maxID = 2;

  // ConditionedStatus provides the status of the VLANIndex using conditions
  // - a ready condition indicates the overall status of the resource
  optional github.com.kuidio.kuid.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 3;
}

message VXLANRangeSyntaxValidator {
}

message VXLANStaticIDSyntaxValidator {
}

