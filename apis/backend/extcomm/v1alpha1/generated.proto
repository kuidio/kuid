/*
Copyright 2024 Nokia.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package github.com.kuidio.kuid.apis.backend.extcomm.v1alpha1;

import "github.com/kform-dev/choreo/apis/condition/v1alpha1/generated.proto";
import "github.com/kuidio/kuid/apis/common/v1alpha1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "github.com/kuidio/kuid/apis/backend/extcomm/v1alpha1";

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:resource:categories={kuid}
// EXTCOMMClaim is the Schema for the EXTCOMMClaim API
message EXTCOMMClaim {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional EXTCOMMClaimSpec spec = 2;

  optional EXTCOMMClaimStatus status = 3;
}

// EXTCOMMClaimList contains a list of EXTCOMMClaims
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message EXTCOMMClaimList {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated EXTCOMMClaim items = 2;
}

// EXTCOMMClaimSpec defines the dEXTCOMMred state of EXTCOMMClaim
message EXTCOMMClaimSpec {
  // EXTCOMMIndex defines the EXTCOMM index for the EXTCOMM Claim
  optional string index = 1;

  // EXTCOMMID defines the EXTCOMM for the EXTCOMM claim
  optional uint64 id = 2;

  // Range defines the EXTCOMM range for the EXTCOMM claim
  // The following notation is used: start-end <start-EXTCOMMID>-<end-EXTCOMMID>
  // the EXTCOMMs in the range must be consecutive
  optional string range = 3;

  // ClaimLabels define the user defined labels and selector labels used
  // in resource claim
  optional .github.com.kuidio.kuid.apis.common.v1alpha1.ClaimLabels claimLabels = 4;
}

// EXTCOMMClaimStatus defines the observed state of EXTCOMMClaim
message EXTCOMMClaimStatus {
  // ConditionedStatus provides the status of the IPClain using conditions
  // - a ready condition indicates the overall status of the resource
  optional .github.com.kform_dev.choreo.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1;

  // EXTCOMMID defines the EXTCOMM for the EXTCOMM claim
  // +optional
  optional uint64 id = 2;

  // EXTCOMMRange defines the EXTCOMM range for the EXTCOMM claim
  // +optional
  optional string range = 3;

  // ExpiryTime defines when the claim expires
  // +kubebuilder:validation:Optional
  // +optional
  optional string expiryTime = 4;
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:resource:categories={kuid}
// EXTCOMMEntry is the Schema for the EXTCOMMentry API
message EXTCOMMEntry {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional EXTCOMMEntrySpec spec = 2;

  optional EXTCOMMEntryStatus status = 3;
}

// EXTCOMMEntryList contains a list of EXTCOMMEntries
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message EXTCOMMEntryList {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated EXTCOMMEntry items = 2;
}

// EXTCOMMEntrySpec defines the dEXTCOMMred state of EXTCOMMEntry
message EXTCOMMEntrySpec {
  // EXTCOMMIndex defines the EXTCOMM index for the EXTCOMM Claim
  optional string index = 1;

  // IndexEntry identifies if the entry is originated from an IP Index
  optional bool indexEntry = 2;

  // ClaimType defines the claimType of the EXTCOMM Entry
  optional string claimType = 3;

  // ID defines the id of the EXTCOMM entry in the tree
  optional string id = 4;

  // ClaimLabels define the user defined labels and selector labels used
  // in resource claim
  optional .github.com.kuidio.kuid.apis.common.v1alpha1.ClaimLabels claimLabels = 5;

  // Claim defines the name of the claim that is the origin of this  entry
  optional string claim = 6;
}

// EXTCOMMEntryStatus defines the observed state of EXTCOMMEntry
message EXTCOMMEntryStatus {
  // ConditionedStatus provides the status of the EXTCOMMEntry using conditions
  // - a ready condition indicates the overall status of the resource
  optional .github.com.kform_dev.choreo.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1;
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:resource:categories={kuid}
// EXTCOMMIndex is the Schema for the EXTCOMMIndex API
message EXTCOMMIndex {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional EXTCOMMIndexSpec spec = 2;

  optional EXTCOMMIndexStatus status = 3;
}

// EXTCOMMIndexList contains a list of EXTCOMMIndexs
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message EXTCOMMIndexList {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated EXTCOMMIndex items = 2;
}

// EXTCOMMIndexSpec defines the dEXTCOMMred state of EXTCOMMIndex
message EXTCOMMIndexSpec {
  // MinID defines the min EXTCOMM ID the index supports
  // +optional
  optional uint64 minID = 1;

  // MaxID defines the max EXTCOMM ID the index supports
  // +optional
  optional uint64 maxID = 2;

  // UserDefinedLabels define metadata to the resource.
  // defined in the spec to distingiush metadata labels from user defined labels
  optional .github.com.kuidio.kuid.apis.common.v1alpha1.UserDefinedLabels userDefinedLabels = 3;

  // Transitive defines the transative nature of the extended community
  optional bool transitive = 4;

  // Type defines the type of the extended community
  // 2byteAS, 4byteAS, ipv4Address, opaque
  optional string type = 5;

  // SubType defines the subTyoe of the extended community
  // routeTarget, routeOrigin;
  optional string subType = 6;

  // GlobalID is interpreted dependeing on the type
  // AS in case of 2byteAS, 4byteAS
  // IPV4 addrress
  // irrelevant for the opaque type
  optional string globalID = 7;
}

// EXTCOMMIndexStatus defines the observed state of EXTCOMMIndex
message EXTCOMMIndexStatus {
  // MinID defines the min EXTCOMM ID the index supports
  // +optional
  optional int64 minID = 1;

  // MaxID defines the max EXTCOMM ID the index supports
  // +optional
  optional int64 maxID = 2;

  // ConditionedStatus provides the status of the EXTCOMMIndex using conditions
  // - a ready condition indicates the overall status of the resource
  optional .github.com.kform_dev.choreo.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 3;
}

