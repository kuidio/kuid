/*
Copyright 2024 Nokia.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package github.com.kuidio.kuid.apis.backend.ipam.v1alpha1;

import "github.com/kuidio/kuid/apis/common/v1alpha1/generated.proto";
import "github.com/kuidio/kuid/apis/condition/v1alpha1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "github.com/kuidio/kuid/apis/backend/ipam/v1alpha1";

// IPClaim is the Schema for the ipclaim API
//
// +k8s:openapi-gen=true
message IPClaim {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional IPClaimSpec spec = 2;

  optional IPClaimStatus status = 3;
}

// IPClaimList contains a list of IPClaims
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message IPClaimList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated IPClaim items = 2;
}

// IPClaimSpec defines the desired state of IPClaim
message IPClaimSpec {
  // NetworkInstance defines the networkInstance context of the IPAddress.
  // A NetworkInstance is a dedicated routing table instance
  optional string networkInstance = 1;

  // PrefixType defines the prefixtype of IPEntry; for address and range claims this is not relevant
  // - network kind is used for physical, virtual nics on a device
  // - pool kind is used for allocating dedicated IP addresses
  // - aggregate kind is used for claiming an aggregate prefix; only used for networkInstance prefixes
  // +kubebuilder:validation:Enum=`network`;`aggregate`;`pool`;
  // +optional
  optional string prefixType = 2;

  // Prefix defines the prefix for the IP claim
  // +optional
  optional string prefix = 3;

  // Address defines the address for the IP claim
  // +optional
  optional string address = 4;

  // Range defines the range for the IP claim
  // +optional
  optional string range = 5;

  // DefaultGateway defines if the address acts as a default gateway
  // +optional
  optional bool defaultGateway = 6;

  // CreatePrefix defines if this prefix must be created. Only used for dynamic prefixes
  // e.g. non /32 ipv4 and non /128 ipv6 prefixes
  // +optional
  optional bool createPrefix = 7;

  // PrefixLength defines the prefix length for the IP Claim, Must be set when CreatePrefic is set
  // If not present we use assume /32 for ipv4 and /128 for ipv6
  // +optional
  optional uint32 prefixLength = 8;

  // AddressFamily defines the address family for the IP claim
  // +kubebuilder:validation:Enum=`ipv4`;`ipv6`
  // +kubebuilder:validation:Optional
  // +optional
  optional string addressFamily = 9;

  // Index defines the index of the IP Claim, used to get a deterministic IP from a prefix
  // If not present we claim a random prefix from a prefix
  // +kubebuilder:validation:Optional
  // +optional
  optional uint32 index = 10;

  // ClaimLabels define the user defined labels and selector labels used
  // in resource claim
  optional github.com.kuidio.kuid.apis.common.v1alpha1.ClaimLabels claimLabels = 11;

  // Owner defines the ownerReference of the IPClaim
  // Allow for different namesapces, hence it is part of the spec
  optional github.com.kuidio.kuid.apis.common.v1alpha1.OwnerReference owner = 12;
}

// IPClaimStatus defines the observed state of IPClaim
message IPClaimStatus {
  // ConditionedStatus provides the status of the IPClain using conditions
  // - a ready condition indicates the overall status of the resource
  optional github.com.kuidio.kuid.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1;

  // Range defines the range, claimed through the IPAM backend
  // +optional
  optional string range = 2;

  // Address defines the address, claimed through the IPAM backend
  // +optional
  optional string address = 3;

  // Prefix defines the prefix, claimed through the IPAM backend
  // +optional
  optional string prefix = 4;

  // DefaultGateway defines the default gateway IP for the claimed prefix
  // DefaultGateway is only relevant for prefix kind = network
  // +optional
  optional string defaultGateway = 5;

  // ExpiryTime defines when the claim expires
  // +kubebuilder:validation:Optional
  // +optional
  optional string expiryTime = 6;
}

// IPEntry is the Schema for the ipentry API
//
// +k8s:openapi-gen=true
message IPEntry {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional IPEntrySpec spec = 2;

  optional IPEntryStatus status = 3;
}

// IPEntryList contains a list of IPEntries
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message IPEntryList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated IPEntry items = 2;
}

// IPEntrySpec defines the desired state of IPEntry
message IPEntrySpec {
  // NetworkInstance defines the networkInstance context of the IPAddress.
  // A NetworkInstance is a dedicated routing table instance
  optional string networkInstance = 1;

  // PrefixType defines the prefixtype of IPEntry; for address and range claims this is not relevant
  // - network kind is used for physical, virtual nics on a device
  // - pool kind is used for allocating dedicated IP addresses
  // - aggregate kind is used for claiming an aggregate prefix; only used for networkInstance prefixes
  // +kubebuilder:validation:Enum=`network`;`aggregate`;`pool`;
  // +optional
  optional string prefixType = 2;

  // ClaimType defines the claimType of the IP Entry
  // +kubebuilder:validation:Enum=`staticAddress`;`staticPrefix`;`staticRange`;`dynamicPrefix`;`dynamicAddress`;
  optional string claimType = 3;

  // Prefix defines the prefix for the IP entry; which can be an expanded prefix from the prefix, range or address
  optional string prefix = 4;

  // DefaultGateway defines if the address acts as a default gateway
  // +optional
  optional bool defaultGateway = 5;

  // AddressFamily defines the address family for the IP claim
  // +kubebuilder:validation:Enum=`ipv4`;`ipv6`
  // +kubebuilder:validation:Optional
  // +optional
  optional string addressFamily = 8;

  // IPClaim defines the name of the ip claim that is the origin of this ip entry
  optional string ipClaim = 10;

  // UserDefinedLabels define the user defined labels
  optional github.com.kuidio.kuid.apis.common.v1alpha1.UserDefinedLabels userDefinedLabels = 11;

  optional github.com.kuidio.kuid.apis.common.v1alpha1.OwnerReference owner = 12;
}

// IPEntryStatus defines the observed state of IPEntry
message IPEntryStatus {
  // ConditionedStatus provides the status of the IPClain using conditions
  // - a ready condition indicates the overall status of the resource
  optional github.com.kuidio.kuid.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1;
}

// IPIndex is the Schema for the IPIndex API
//
// +k8s:openapi-gen=true
message IPIndex {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional IPIndexSpec spec = 2;

  optional IPIndexStatus status = 3;
}

// IPIndexList contains a list of IPIndexs
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message IPIndexList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated IPIndex items = 2;
}

// IPIndexSpec defines the desired state of IPIndex
message IPIndexSpec {
}

// IPIndexStatus defines the observed state of IPIndex
message IPIndexStatus {
  // ConditionedStatus provides the status of the IPClain using conditions
  // - a ready condition indicates the overall status of the resource
  optional github.com.kuidio.kuid.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1;
}

