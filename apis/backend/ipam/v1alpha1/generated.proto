/*
Copyright 2024 Nokia.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package github.com.kuidio.kuid.apis.backend.ipam.v1alpha1;

import "github.com/kuidio/kuid/apis/common/v1alpha1/generated.proto";
import "github.com/kuidio/kuid/apis/condition/v1alpha1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "github.com/kuidio/kuid/apis/backend/ipam/v1alpha1";

// IPClaim is the Schema for the ipclaim API
//
// +k8s:openapi-gen=true
message IPClaim {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional IPClaimSpec spec = 2;

  optional IPClaimStatus status = 3;
}

// IPClaimList contains a list of IPClaims
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message IPClaimList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated IPClaim items = 2;
}

// IPClaimSpec defines the desired state of IPClaim
message IPClaimSpec {
  // Kind defines the kind of prefix for the IP Claim
  // - network kind is used for physical, virtual nics on a device
  // - loopback kind is used for loopback interfaces within a device
  // - pool kind is used for pools for dhcp/radius/bng/upf/etc
  // - aggregate kind is used for claiming an aggregate prefix
  // +kubebuilder:validation:Enum=`network`;`loopback`;`pool`;`aggregate`
  // +kubebuilder:default=network
  optional string kind = 1;

  // NetworkInstance defines the networkInstance context for the IP claim
  // The NetworkInstance must exist within the IPClaim namespace to succeed
  // in claiming the ip
  optional string networkInstance = 2;

  // AddressFamily defines the address family for the IP claim
  // +kubebuilder:validation:Enum=`ipv4`;`ipv6`
  // +kubebuilder:validation:Optional
  // +optional
  optional string addressFamily = 3;

  // Prefix defines the prefix for the IP claim
  // Used for specific prefix claim or used as a hint for a dynamic prefix claim in case of restart
  // +kubebuilder:validation:Pattern=`(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))|((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))`
  // +kubebuilder:validation:Optional
  // +optional
  optional string prefix = 4;

  // Gateway defines if the prefix/address is a gateway
  // +kubebuilder:validation:Optional
  // +optional
  optional bool gateway = 5;

  // PrefixLength defines the prefix length for the IP Claim
  // If not present we use assume /32 for ipv4 and /128 for ipv6
  // +kubebuilder:validation:Optional
  // +optional
  optional uint32 prefixLength = 6;

  // Index defines the index of the IP Claim, used to get a deterministic IP from a prefix
  // If not present we claim a random prefix from a prefix
  // +kubebuilder:validation:Optional
  // +optional
  optional uint32 index = 7;

  // CreatePrefix defines if this prefix must be created. Only used for non address prefixes
  // e.g. non /32 ipv4 and non /128 ipv6 prefixes
  // +kubebuilder:validation:Optional
  // +optional
  optional bool createPrefix = 8;

  // ClaimLabels define the user defined labels and selector labels used
  // in resource claim
  optional github.com.kuidio.kuid.apis.common.v1alpha1.ClaimLabels claimLabels = 9;

  optional github.com.kuidio.kuid.apis.common.v1alpha1.OwnerReference owner = 10;
}

// IPClaimStatus defines the observed state of IPClaim
message IPClaimStatus {
  // ConditionedStatus provides the status of the IPClain using conditions
  // - a ready condition indicates the overall status of the resource
  optional github.com.kuidio.kuid.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1;

  // Prefix defines the prefix, claimed through the IPAM backend
  // +kubebuilder:validation:Optional
  // +optional
  optional string prefix = 2;

  // Gateway defines the gateway IP for the claimed prefix
  // Gateway is only relevant for prefix kind = network
  // +kubebuilder:validation:Optional
  // +optional
  optional string gateway = 3;

  // ExpiryTime defines when the claim expires
  // +kubebuilder:validation:Optional
  // +optional
  optional string expiryTime = 4;
}

// IPEntry is the Schema for the ipentry API
//
// +k8s:openapi-gen=true
message IPEntry {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional IPEntrySpec spec = 2;

  optional IPEntryStatus status = 3;
}

// IPEntryList contains a list of IPEntries
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message IPEntryList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated IPEntry items = 2;
}

// IPEntrySpec defines the desired state of IPEntry
message IPEntrySpec {
  // Kind defines the kind of prefix for the IP Claim
  // - network kind is used for physical, virtual nics on a device
  // - loopback kind is used for loopback interfaces within a device
  // - pool kind is used for pools for dhcp/radius/bng/upf/etc
  // - aggregate kind is used for claiming an aggregate prefix
  // +kubebuilder:validation:Enum=`network`;`loopback`;`pool`;`aggregate`
  // +kubebuilder:default=network
  optional string kind = 1;

  // NetworkInstance defines the networkInstance context for the IP claim
  // The NetworkInstance must exist within the IPClaim namespace to succeed
  // in claiming the ip
  optional string networkInstance = 2;

  // AddressFamily defines the address family for the IP Entry
  // +kubebuilder:validation:Enum=`ipv4`;`ipv6`
  optional string addressFamily = 3;

  // Prefix defines the prefix for the IP Entry; can be address or prefix
  // +kubebuilder:validation:Pattern=`(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))|((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))`
  optional string prefix = 4;

  // ParentPrefix defines the parent prefix for the IP Entry
  // Used for specific prefix claim or used as a hint for a dynamic prefix claim in case of restart
  // +kubebuilder:validation:Pattern=`(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))|((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))`
  // +kubebuilder:validation:Optional
  optional string subnet = 5;

  // Index defines the index of the IP Entry, used to get a deterministic IP from a prefix
  // If not present we claim a random prefix from a prefix
  // +kubebuilder:validation:Optional
  optional uint32 index = 6;

  // Gateway defines if the prefix/address is a gateway
  // +kubebuilder:validation:Optional
  optional bool gateway = 7;

  // IPClaim defines the name of the ip claim that is the origin of this ip entry
  optional string ipClaim = 8;

  // UserDefinedLabels define the user defined labels
  optional github.com.kuidio.kuid.apis.common.v1alpha1.UserDefinedLabels userDefinedLabels = 9;

  optional github.com.kuidio.kuid.apis.common.v1alpha1.OwnerReference owner = 10;
}

// IPEntryStatus defines the observed state of IPEntry
message IPEntryStatus {
  // ConditionedStatus provides the status of the IPClain using conditions
  // - a ready condition indicates the overall status of the resource
  optional github.com.kuidio.kuid.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1;
}

// IPIndex is the Schema for the IPIndex API
//
// +k8s:openapi-gen=true
message IPIndex {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional IPIndexSpec spec = 2;

  optional IPIndexStatus status = 3;
}

// IPIndexList contains a list of IPIndexs
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message IPIndexList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated IPIndex items = 2;
}

// IPIndexSpec defines the desired state of IPIndex
message IPIndexSpec {
}

// IPIndexStatus defines the observed state of IPIndex
message IPIndexStatus {
  // ConditionedStatus provides the status of the IPClain using conditions
  // - a ready condition indicates the overall status of the resource
  optional github.com.kuidio.kuid.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1;
}

