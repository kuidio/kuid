/*
Copyright 2024 Nokia.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package github.com.kuidio.kuid.apis.backend.esi.v1alpha1;

import "github.com/kuidio/kuid/apis/common/v1alpha1/generated.proto";
import "github.com/kuidio/kuid/apis/condition/v1alpha1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "github.com/kuidio/kuid/apis/backend/esi/v1alpha1";

// ESIClaim is the Schema for the ESIClaim API
//
// +k8s:openapi-gen=true
message ESIClaim {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ESIClaimSpec spec = 2;

  optional ESIClaimStatus status = 3;
}

// ESIClaimList contains a list of ESIClaims
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message ESIClaimList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated ESIClaim items = 2;
}

// ESIClaimSpec defines the desired state of ESIClaim
message ESIClaimSpec {
  // ESIIndex defines the ESI index for the ESI Claim
  optional string index = 1;

  // ESIID defines the ESI for the ESI claim
  optional uint64 id = 2;

  // Range defines the ESI range for the ESI claim
  // The following notation is used: start-end <start-ESIID>-<end-ESIID>
  // the ESIs in the range must be consecutive
  optional string range = 3;

  // ClaimLabels define the user defined labels and selector labels used
  // in resource claim
  optional github.com.kuidio.kuid.apis.common.v1alpha1.ClaimLabels claimLabels = 4;

  // Owner defines the ownerReference of the ESIClaim
  // Allow for different namesapces, hence it is part of the spec
  optional github.com.kuidio.kuid.apis.common.v1alpha1.OwnerReference owner = 5;
}

// ESIClaimStatus defines the observed state of ESIClaim
message ESIClaimStatus {
  // ConditionedStatus provides the status of the IPClain using conditions
  // - a ready condition indicates the overall status of the resource
  optional github.com.kuidio.kuid.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1;

  // ESIID defines the ESI for the ESI claim
  // +optional
  optional uint64 id = 2;

  // ESIRange defines the ESI range for the ESI claim
  // +optional
  optional string range = 3;

  // ExpiryTime defines when the claim expires
  // +kubebuilder:validation:Optional
  // +optional
  optional string expiryTime = 4;
}

message ESIDynamicIDSyntaxValidator {
}

// ESIEntry is the Schema for the ESIentry API
//
// +k8s:openapi-gen=true
message ESIEntry {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ESIEntrySpec spec = 2;

  optional ESIEntryStatus status = 3;
}

// ESIEntryList contains a list of ESIEntries
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message ESIEntryList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated ESIEntry items = 2;
}

// ESIEntrySpec defines the desired state of ESIEntry
message ESIEntrySpec {
  // ESIIndex defines the ESI index for the ESI Claim
  optional string index = 1;

  // ClaimType defines the claimType of the ESI Entry
  optional string claimType = 2;

  // ID defines the id of the ESI entry in the tree
  optional string id = 3;

  // ClaimLabels define the user defined labels and selector labels used
  // in resource claim
  optional github.com.kuidio.kuid.apis.common.v1alpha1.ClaimLabels claimLabels = 4;

  // Claim defines the name of the claim that is the origin of this  entry
  optional string claim = 5;

  // Owner defines the ownerReference of the ESIClaim
  // Allow for different namesapces, hence it is part of the spec
  optional github.com.kuidio.kuid.apis.common.v1alpha1.OwnerReference owner = 6;
}

// ESIEntryStatus defines the observed state of ESIEntry
message ESIEntryStatus {
  // ConditionedStatus provides the status of the ESIEntry using conditions
  // - a ready condition indicates the overall status of the resource
  optional github.com.kuidio.kuid.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1;
}

// ESIIndex is the Schema for the ESIIndex API
//
// +k8s:openapi-gen=true
message ESIIndex {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ESIIndexSpec spec = 2;

  optional ESIIndexStatus status = 3;
}

// ESIIndexList contains a list of ESIIndexs
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message ESIIndexList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated ESIIndex items = 2;
}

// ESIIndexSpec defines the desired state of ESIIndex
message ESIIndexSpec {
  // MinID defines the min ESI ID the index supports
  // +optional
  optional uint64 minID = 1;

  // MaxID defines the max ESI ID the index supports
  // +optional
  optional uint64 maxID = 2;

  // UserDefinedLabels define metadata to the resource.
  // defined in the spec to distingiush metadata labels from user defined labels
  optional github.com.kuidio.kuid.apis.common.v1alpha1.UserDefinedLabels userDefinedLabels = 3;
}

// ESIIndexStatus defines the observed state of ESIIndex
message ESIIndexStatus {
  // MinID defines the min ESI ID the index supports
  // +optional
  optional uint64 minID = 1;

  // MaxID defines the max ESI ID the index supports
  // +optional
  optional uint64 maxID = 2;

  // ConditionedStatus provides the status of the ESIIndex using conditions
  // - a ready condition indicates the overall status of the resource
  optional github.com.kuidio.kuid.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 3;
}

message ESIRangeSyntaxValidator {
}

message ESIStaticIDSyntaxValidator {
}

