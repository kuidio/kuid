/*
Copyright 2024 Nokia.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package github.com.kuidio.kuid.apis.backend.genid.v1alpha1;

import "github.com/kuidio/kuid/apis/common/v1alpha1/generated.proto";
import "github.com/kuidio/kuid/apis/condition/v1alpha1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "github.com/kuidio/kuid/apis/backend/genid/v1alpha1";

// GENIDClaim is the Schema for the GENIDClaim API
//
// +k8s:openapi-gen=true
message GENIDClaim {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional GENIDClaimSpec spec = 2;

  optional GENIDClaimStatus status = 3;
}

// GENIDClaimList contains a list of GENIDClaims
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message GENIDClaimList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated GENIDClaim items = 2;
}

// GENIDClaimSpec defines the dGENIDred state of GENIDClaim
message GENIDClaimSpec {
  // GENIDIndex defines the GENID index for the GENID Claim
  optional string index = 1;

  // GENIDID defines the GENID for the GENID claim
  optional int64 id = 2;

  // Range defines the GENID range for the GENID claim
  // The following notation is used: start-end <start-GENIDID>-<end-GENIDID>
  // the GENIDs in the range must be consecutive
  optional string range = 3;

  // ClaimLabels define the user defined labels and selector labels used
  // in resource claim
  optional github.com.kuidio.kuid.apis.common.v1alpha1.ClaimLabels claimLabels = 4;

  // Owner defines the ownerReference of the GENIDClaim
  // Allow for different namesapces, hence it is part of the spec
  optional github.com.kuidio.kuid.apis.common.v1alpha1.OwnerReference owner = 5;
}

// GENIDClaimStatus defines the observed state of GENIDClaim
message GENIDClaimStatus {
  // ConditionedStatus provides the status of the IPClain using conditions
  // - a ready condition indicates the overall status of the resource
  optional github.com.kuidio.kuid.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1;

  // GENIDID defines the GENID for the GENID claim
  // +optional
  optional int64 id = 2;

  // GENIDRange defines the GENID range for the GENID claim
  // +optional
  optional string range = 3;

  // ExpiryTime defines when the claim expires
  // +kubebuilder:validation:Optional
  // +optional
  optional string expiryTime = 4;
}

message GENIDDynamicIDSyntaxValidator {
}

// GENIDEntry is the Schema for the GENIDentry API
//
// +k8s:openapi-gen=true
message GENIDEntry {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional GENIDEntrySpec spec = 2;

  optional GENIDEntryStatus status = 3;
}

// GENIDEntryList contains a list of GENIDEntries
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message GENIDEntryList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated GENIDEntry items = 2;
}

// GENIDEntrySpec defines the dGENIDred state of GENIDEntry
message GENIDEntrySpec {
  // GENIDIndex defines the GENID index for the GENID Claim
  optional string index = 1;

  // ClaimType defines the claimType of the GENID Entry
  optional string claimType = 2;

  // ID defines the id of the GENID entry in the tree
  optional string id = 3;

  // ClaimLabels define the user defined labels and selector labels used
  // in resource claim
  optional github.com.kuidio.kuid.apis.common.v1alpha1.ClaimLabels claimLabels = 4;

  // Claim defines the name of the claim that is the origin of this  entry
  optional string claim = 5;

  // Owner defines the ownerReference of the GENIDClaim
  // Allow for different namesapces, hence it is part of the spec
  optional github.com.kuidio.kuid.apis.common.v1alpha1.OwnerReference owner = 6;
}

// GENIDEntryStatus defines the observed state of GENIDEntry
message GENIDEntryStatus {
  // ConditionedStatus provides the status of the GENIDEntry using conditions
  // - a ready condition indicates the overall status of the resource
  optional github.com.kuidio.kuid.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1;
}

// GENIDIndex is the Schema for the GENIDIndex API
//
// +k8s:openapi-gen=true
message GENIDIndex {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional GENIDIndexSpec spec = 2;

  optional GENIDIndexStatus status = 3;
}

// GENIDIndexList contains a list of GENIDIndexs
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message GENIDIndexList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated GENIDIndex items = 2;
}

// GENIDIndexSpec defines the dGENIDred state of GENIDIndex
message GENIDIndexSpec {
  // MinID defines the min GENID ID the index supports
  // +optional
  optional int64 minID = 1;

  // MaxID defines the max GENID ID the index supports
  // +optional
  optional int64 maxID = 2;

  // UserDefinedLabels define metadata to the resource.
  // defined in the spec to distingiush metadata labels from user defined labels
  optional github.com.kuidio.kuid.apis.common.v1alpha1.UserDefinedLabels userDefinedLabels = 3;

  // Type defines the type of the GENID
  // 16bit, 32bit, 48bit, 64bit
  optional string type = 4;
}

// GENIDIndexStatus defines the observed state of GENIDIndex
message GENIDIndexStatus {
  // MinID defines the min GENID ID the index supports
  // +optional
  optional int64 minID = 1;

  // MaxID defines the max GENID ID the index supports
  // +optional
  optional int64 maxID = 2;

  // ConditionedStatus provides the status of the GENIDIndex using conditions
  // - a ready condition indicates the overall status of the resource
  optional github.com.kuidio.kuid.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 3;
}

message GENIDRangeSyntaxValidator {
}

message GENIDStaticIDSyntaxValidator {
}

