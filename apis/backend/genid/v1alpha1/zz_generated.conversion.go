//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2024 Nokia.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by conversion-gen. DO NOT EDIT.

package v1alpha1

import (
	unsafe "unsafe"

	backend "github.com/kuidio/kuid/apis/backend"
	asv1alpha1 "github.com/kuidio/kuid/apis/backend/as/v1alpha1"
	genid "github.com/kuidio/kuid/apis/backend/genid"
	conversion "k8s.io/apimachinery/pkg/conversion"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

func init() {
	localSchemeBuilder.Register(RegisterConversions)
}

// RegisterConversions adds conversion functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterConversions(s *runtime.Scheme) error {
	if err := s.AddGeneratedConversionFunc((*GENIDClaim)(nil), (*genid.GENIDClaim)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_GENIDClaim_To_genid_GENIDClaim(a.(*GENIDClaim), b.(*genid.GENIDClaim), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*genid.GENIDClaim)(nil), (*GENIDClaim)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_genid_GENIDClaim_To_v1alpha1_GENIDClaim(a.(*genid.GENIDClaim), b.(*GENIDClaim), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*GENIDClaimList)(nil), (*genid.GENIDClaimList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_GENIDClaimList_To_genid_GENIDClaimList(a.(*GENIDClaimList), b.(*genid.GENIDClaimList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*genid.GENIDClaimList)(nil), (*GENIDClaimList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_genid_GENIDClaimList_To_v1alpha1_GENIDClaimList(a.(*genid.GENIDClaimList), b.(*GENIDClaimList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*GENIDClaimSpec)(nil), (*genid.GENIDClaimSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_GENIDClaimSpec_To_genid_GENIDClaimSpec(a.(*GENIDClaimSpec), b.(*genid.GENIDClaimSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*genid.GENIDClaimSpec)(nil), (*GENIDClaimSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_genid_GENIDClaimSpec_To_v1alpha1_GENIDClaimSpec(a.(*genid.GENIDClaimSpec), b.(*GENIDClaimSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*GENIDClaimStatus)(nil), (*genid.GENIDClaimStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_GENIDClaimStatus_To_genid_GENIDClaimStatus(a.(*GENIDClaimStatus), b.(*genid.GENIDClaimStatus), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*genid.GENIDClaimStatus)(nil), (*GENIDClaimStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_genid_GENIDClaimStatus_To_v1alpha1_GENIDClaimStatus(a.(*genid.GENIDClaimStatus), b.(*GENIDClaimStatus), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*GENIDEntry)(nil), (*genid.GENIDEntry)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_GENIDEntry_To_genid_GENIDEntry(a.(*GENIDEntry), b.(*genid.GENIDEntry), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*genid.GENIDEntry)(nil), (*GENIDEntry)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_genid_GENIDEntry_To_v1alpha1_GENIDEntry(a.(*genid.GENIDEntry), b.(*GENIDEntry), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*GENIDEntryList)(nil), (*genid.GENIDEntryList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_GENIDEntryList_To_genid_GENIDEntryList(a.(*GENIDEntryList), b.(*genid.GENIDEntryList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*genid.GENIDEntryList)(nil), (*GENIDEntryList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_genid_GENIDEntryList_To_v1alpha1_GENIDEntryList(a.(*genid.GENIDEntryList), b.(*GENIDEntryList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*GENIDEntrySpec)(nil), (*genid.GENIDEntrySpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_GENIDEntrySpec_To_genid_GENIDEntrySpec(a.(*GENIDEntrySpec), b.(*genid.GENIDEntrySpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*genid.GENIDEntrySpec)(nil), (*GENIDEntrySpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_genid_GENIDEntrySpec_To_v1alpha1_GENIDEntrySpec(a.(*genid.GENIDEntrySpec), b.(*GENIDEntrySpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*GENIDEntryStatus)(nil), (*genid.GENIDEntryStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_GENIDEntryStatus_To_genid_GENIDEntryStatus(a.(*GENIDEntryStatus), b.(*genid.GENIDEntryStatus), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*genid.GENIDEntryStatus)(nil), (*GENIDEntryStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_genid_GENIDEntryStatus_To_v1alpha1_GENIDEntryStatus(a.(*genid.GENIDEntryStatus), b.(*GENIDEntryStatus), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*GENIDIndex)(nil), (*genid.GENIDIndex)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_GENIDIndex_To_genid_GENIDIndex(a.(*GENIDIndex), b.(*genid.GENIDIndex), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*genid.GENIDIndex)(nil), (*GENIDIndex)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_genid_GENIDIndex_To_v1alpha1_GENIDIndex(a.(*genid.GENIDIndex), b.(*GENIDIndex), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*GENIDIndexList)(nil), (*genid.GENIDIndexList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_GENIDIndexList_To_genid_GENIDIndexList(a.(*GENIDIndexList), b.(*genid.GENIDIndexList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*genid.GENIDIndexList)(nil), (*GENIDIndexList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_genid_GENIDIndexList_To_v1alpha1_GENIDIndexList(a.(*genid.GENIDIndexList), b.(*GENIDIndexList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*GENIDIndexSpec)(nil), (*genid.GENIDIndexSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_GENIDIndexSpec_To_genid_GENIDIndexSpec(a.(*GENIDIndexSpec), b.(*genid.GENIDIndexSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*genid.GENIDIndexSpec)(nil), (*GENIDIndexSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_genid_GENIDIndexSpec_To_v1alpha1_GENIDIndexSpec(a.(*genid.GENIDIndexSpec), b.(*GENIDIndexSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*GENIDIndexStatus)(nil), (*genid.GENIDIndexStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_GENIDIndexStatus_To_genid_GENIDIndexStatus(a.(*GENIDIndexStatus), b.(*genid.GENIDIndexStatus), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*genid.GENIDIndexStatus)(nil), (*GENIDIndexStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_genid_GENIDIndexStatus_To_v1alpha1_GENIDIndexStatus(a.(*genid.GENIDIndexStatus), b.(*GENIDIndexStatus), scope)
	}); err != nil {
		return err
	}
	return nil
}

func autoConvert_v1alpha1_GENIDClaim_To_genid_GENIDClaim(in *GENIDClaim, out *genid.GENIDClaim, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1alpha1_GENIDClaimSpec_To_genid_GENIDClaimSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_v1alpha1_GENIDClaimStatus_To_genid_GENIDClaimStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1alpha1_GENIDClaim_To_genid_GENIDClaim is an autogenerated conversion function.
func Convert_v1alpha1_GENIDClaim_To_genid_GENIDClaim(in *GENIDClaim, out *genid.GENIDClaim, s conversion.Scope) error {
	return autoConvert_v1alpha1_GENIDClaim_To_genid_GENIDClaim(in, out, s)
}

func autoConvert_genid_GENIDClaim_To_v1alpha1_GENIDClaim(in *genid.GENIDClaim, out *GENIDClaim, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_genid_GENIDClaimSpec_To_v1alpha1_GENIDClaimSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_genid_GENIDClaimStatus_To_v1alpha1_GENIDClaimStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

// Convert_genid_GENIDClaim_To_v1alpha1_GENIDClaim is an autogenerated conversion function.
func Convert_genid_GENIDClaim_To_v1alpha1_GENIDClaim(in *genid.GENIDClaim, out *GENIDClaim, s conversion.Scope) error {
	return autoConvert_genid_GENIDClaim_To_v1alpha1_GENIDClaim(in, out, s)
}

func autoConvert_v1alpha1_GENIDClaimList_To_genid_GENIDClaimList(in *GENIDClaimList, out *genid.GENIDClaimList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]genid.GENIDClaim, len(*in))
		for i := range *in {
			if err := Convert_v1alpha1_GENIDClaim_To_genid_GENIDClaim(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

// Convert_v1alpha1_GENIDClaimList_To_genid_GENIDClaimList is an autogenerated conversion function.
func Convert_v1alpha1_GENIDClaimList_To_genid_GENIDClaimList(in *GENIDClaimList, out *genid.GENIDClaimList, s conversion.Scope) error {
	return autoConvert_v1alpha1_GENIDClaimList_To_genid_GENIDClaimList(in, out, s)
}

func autoConvert_genid_GENIDClaimList_To_v1alpha1_GENIDClaimList(in *genid.GENIDClaimList, out *GENIDClaimList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]GENIDClaim, len(*in))
		for i := range *in {
			if err := Convert_genid_GENIDClaim_To_v1alpha1_GENIDClaim(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

// Convert_genid_GENIDClaimList_To_v1alpha1_GENIDClaimList is an autogenerated conversion function.
func Convert_genid_GENIDClaimList_To_v1alpha1_GENIDClaimList(in *genid.GENIDClaimList, out *GENIDClaimList, s conversion.Scope) error {
	return autoConvert_genid_GENIDClaimList_To_v1alpha1_GENIDClaimList(in, out, s)
}

func autoConvert_v1alpha1_GENIDClaimSpec_To_genid_GENIDClaimSpec(in *GENIDClaimSpec, out *genid.GENIDClaimSpec, s conversion.Scope) error {
	out.Index = in.Index
	out.ID = (*uint64)(unsafe.Pointer(in.ID))
	out.Range = (*string)(unsafe.Pointer(in.Range))
	if err := asv1alpha1.Convert_v1alpha1_ClaimLabels_To_common_ClaimLabels(&in.ClaimLabels, &out.ClaimLabels, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1alpha1_GENIDClaimSpec_To_genid_GENIDClaimSpec is an autogenerated conversion function.
func Convert_v1alpha1_GENIDClaimSpec_To_genid_GENIDClaimSpec(in *GENIDClaimSpec, out *genid.GENIDClaimSpec, s conversion.Scope) error {
	return autoConvert_v1alpha1_GENIDClaimSpec_To_genid_GENIDClaimSpec(in, out, s)
}

func autoConvert_genid_GENIDClaimSpec_To_v1alpha1_GENIDClaimSpec(in *genid.GENIDClaimSpec, out *GENIDClaimSpec, s conversion.Scope) error {
	out.Index = in.Index
	out.ID = (*uint64)(unsafe.Pointer(in.ID))
	out.Range = (*string)(unsafe.Pointer(in.Range))
	if err := asv1alpha1.Convert_common_ClaimLabels_To_v1alpha1_ClaimLabels(&in.ClaimLabels, &out.ClaimLabels, s); err != nil {
		return err
	}
	return nil
}

// Convert_genid_GENIDClaimSpec_To_v1alpha1_GENIDClaimSpec is an autogenerated conversion function.
func Convert_genid_GENIDClaimSpec_To_v1alpha1_GENIDClaimSpec(in *genid.GENIDClaimSpec, out *GENIDClaimSpec, s conversion.Scope) error {
	return autoConvert_genid_GENIDClaimSpec_To_v1alpha1_GENIDClaimSpec(in, out, s)
}

func autoConvert_v1alpha1_GENIDClaimStatus_To_genid_GENIDClaimStatus(in *GENIDClaimStatus, out *genid.GENIDClaimStatus, s conversion.Scope) error {
	if err := asv1alpha1.Convert_v1alpha1_ConditionedStatus_To_condition_ConditionedStatus(&in.ConditionedStatus, &out.ConditionedStatus, s); err != nil {
		return err
	}
	out.ID = (*uint64)(unsafe.Pointer(in.ID))
	out.Range = (*string)(unsafe.Pointer(in.Range))
	out.ExpiryTime = (*string)(unsafe.Pointer(in.ExpiryTime))
	return nil
}

// Convert_v1alpha1_GENIDClaimStatus_To_genid_GENIDClaimStatus is an autogenerated conversion function.
func Convert_v1alpha1_GENIDClaimStatus_To_genid_GENIDClaimStatus(in *GENIDClaimStatus, out *genid.GENIDClaimStatus, s conversion.Scope) error {
	return autoConvert_v1alpha1_GENIDClaimStatus_To_genid_GENIDClaimStatus(in, out, s)
}

func autoConvert_genid_GENIDClaimStatus_To_v1alpha1_GENIDClaimStatus(in *genid.GENIDClaimStatus, out *GENIDClaimStatus, s conversion.Scope) error {
	if err := asv1alpha1.Convert_condition_ConditionedStatus_To_v1alpha1_ConditionedStatus(&in.ConditionedStatus, &out.ConditionedStatus, s); err != nil {
		return err
	}
	out.ID = (*uint64)(unsafe.Pointer(in.ID))
	out.Range = (*string)(unsafe.Pointer(in.Range))
	out.ExpiryTime = (*string)(unsafe.Pointer(in.ExpiryTime))
	return nil
}

// Convert_genid_GENIDClaimStatus_To_v1alpha1_GENIDClaimStatus is an autogenerated conversion function.
func Convert_genid_GENIDClaimStatus_To_v1alpha1_GENIDClaimStatus(in *genid.GENIDClaimStatus, out *GENIDClaimStatus, s conversion.Scope) error {
	return autoConvert_genid_GENIDClaimStatus_To_v1alpha1_GENIDClaimStatus(in, out, s)
}

func autoConvert_v1alpha1_GENIDEntry_To_genid_GENIDEntry(in *GENIDEntry, out *genid.GENIDEntry, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1alpha1_GENIDEntrySpec_To_genid_GENIDEntrySpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_v1alpha1_GENIDEntryStatus_To_genid_GENIDEntryStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1alpha1_GENIDEntry_To_genid_GENIDEntry is an autogenerated conversion function.
func Convert_v1alpha1_GENIDEntry_To_genid_GENIDEntry(in *GENIDEntry, out *genid.GENIDEntry, s conversion.Scope) error {
	return autoConvert_v1alpha1_GENIDEntry_To_genid_GENIDEntry(in, out, s)
}

func autoConvert_genid_GENIDEntry_To_v1alpha1_GENIDEntry(in *genid.GENIDEntry, out *GENIDEntry, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_genid_GENIDEntrySpec_To_v1alpha1_GENIDEntrySpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_genid_GENIDEntryStatus_To_v1alpha1_GENIDEntryStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

// Convert_genid_GENIDEntry_To_v1alpha1_GENIDEntry is an autogenerated conversion function.
func Convert_genid_GENIDEntry_To_v1alpha1_GENIDEntry(in *genid.GENIDEntry, out *GENIDEntry, s conversion.Scope) error {
	return autoConvert_genid_GENIDEntry_To_v1alpha1_GENIDEntry(in, out, s)
}

func autoConvert_v1alpha1_GENIDEntryList_To_genid_GENIDEntryList(in *GENIDEntryList, out *genid.GENIDEntryList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]genid.GENIDEntry, len(*in))
		for i := range *in {
			if err := Convert_v1alpha1_GENIDEntry_To_genid_GENIDEntry(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

// Convert_v1alpha1_GENIDEntryList_To_genid_GENIDEntryList is an autogenerated conversion function.
func Convert_v1alpha1_GENIDEntryList_To_genid_GENIDEntryList(in *GENIDEntryList, out *genid.GENIDEntryList, s conversion.Scope) error {
	return autoConvert_v1alpha1_GENIDEntryList_To_genid_GENIDEntryList(in, out, s)
}

func autoConvert_genid_GENIDEntryList_To_v1alpha1_GENIDEntryList(in *genid.GENIDEntryList, out *GENIDEntryList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]GENIDEntry, len(*in))
		for i := range *in {
			if err := Convert_genid_GENIDEntry_To_v1alpha1_GENIDEntry(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

// Convert_genid_GENIDEntryList_To_v1alpha1_GENIDEntryList is an autogenerated conversion function.
func Convert_genid_GENIDEntryList_To_v1alpha1_GENIDEntryList(in *genid.GENIDEntryList, out *GENIDEntryList, s conversion.Scope) error {
	return autoConvert_genid_GENIDEntryList_To_v1alpha1_GENIDEntryList(in, out, s)
}

func autoConvert_v1alpha1_GENIDEntrySpec_To_genid_GENIDEntrySpec(in *GENIDEntrySpec, out *genid.GENIDEntrySpec, s conversion.Scope) error {
	out.Index = in.Index
	out.ClaimType = backend.ClaimType(in.ClaimType)
	out.ID = in.ID
	if err := asv1alpha1.Convert_v1alpha1_ClaimLabels_To_common_ClaimLabels(&in.ClaimLabels, &out.ClaimLabels, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1alpha1_GENIDEntrySpec_To_genid_GENIDEntrySpec is an autogenerated conversion function.
func Convert_v1alpha1_GENIDEntrySpec_To_genid_GENIDEntrySpec(in *GENIDEntrySpec, out *genid.GENIDEntrySpec, s conversion.Scope) error {
	return autoConvert_v1alpha1_GENIDEntrySpec_To_genid_GENIDEntrySpec(in, out, s)
}

func autoConvert_genid_GENIDEntrySpec_To_v1alpha1_GENIDEntrySpec(in *genid.GENIDEntrySpec, out *GENIDEntrySpec, s conversion.Scope) error {
	out.Index = in.Index
	out.ClaimType = backend.ClaimType(in.ClaimType)
	out.ID = in.ID
	if err := asv1alpha1.Convert_common_ClaimLabels_To_v1alpha1_ClaimLabels(&in.ClaimLabels, &out.ClaimLabels, s); err != nil {
		return err
	}
	return nil
}

// Convert_genid_GENIDEntrySpec_To_v1alpha1_GENIDEntrySpec is an autogenerated conversion function.
func Convert_genid_GENIDEntrySpec_To_v1alpha1_GENIDEntrySpec(in *genid.GENIDEntrySpec, out *GENIDEntrySpec, s conversion.Scope) error {
	return autoConvert_genid_GENIDEntrySpec_To_v1alpha1_GENIDEntrySpec(in, out, s)
}

func autoConvert_v1alpha1_GENIDEntryStatus_To_genid_GENIDEntryStatus(in *GENIDEntryStatus, out *genid.GENIDEntryStatus, s conversion.Scope) error {
	if err := asv1alpha1.Convert_v1alpha1_ConditionedStatus_To_condition_ConditionedStatus(&in.ConditionedStatus, &out.ConditionedStatus, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1alpha1_GENIDEntryStatus_To_genid_GENIDEntryStatus is an autogenerated conversion function.
func Convert_v1alpha1_GENIDEntryStatus_To_genid_GENIDEntryStatus(in *GENIDEntryStatus, out *genid.GENIDEntryStatus, s conversion.Scope) error {
	return autoConvert_v1alpha1_GENIDEntryStatus_To_genid_GENIDEntryStatus(in, out, s)
}

func autoConvert_genid_GENIDEntryStatus_To_v1alpha1_GENIDEntryStatus(in *genid.GENIDEntryStatus, out *GENIDEntryStatus, s conversion.Scope) error {
	if err := asv1alpha1.Convert_condition_ConditionedStatus_To_v1alpha1_ConditionedStatus(&in.ConditionedStatus, &out.ConditionedStatus, s); err != nil {
		return err
	}
	return nil
}

// Convert_genid_GENIDEntryStatus_To_v1alpha1_GENIDEntryStatus is an autogenerated conversion function.
func Convert_genid_GENIDEntryStatus_To_v1alpha1_GENIDEntryStatus(in *genid.GENIDEntryStatus, out *GENIDEntryStatus, s conversion.Scope) error {
	return autoConvert_genid_GENIDEntryStatus_To_v1alpha1_GENIDEntryStatus(in, out, s)
}

func autoConvert_v1alpha1_GENIDIndex_To_genid_GENIDIndex(in *GENIDIndex, out *genid.GENIDIndex, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1alpha1_GENIDIndexSpec_To_genid_GENIDIndexSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_v1alpha1_GENIDIndexStatus_To_genid_GENIDIndexStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1alpha1_GENIDIndex_To_genid_GENIDIndex is an autogenerated conversion function.
func Convert_v1alpha1_GENIDIndex_To_genid_GENIDIndex(in *GENIDIndex, out *genid.GENIDIndex, s conversion.Scope) error {
	return autoConvert_v1alpha1_GENIDIndex_To_genid_GENIDIndex(in, out, s)
}

func autoConvert_genid_GENIDIndex_To_v1alpha1_GENIDIndex(in *genid.GENIDIndex, out *GENIDIndex, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_genid_GENIDIndexSpec_To_v1alpha1_GENIDIndexSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_genid_GENIDIndexStatus_To_v1alpha1_GENIDIndexStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

// Convert_genid_GENIDIndex_To_v1alpha1_GENIDIndex is an autogenerated conversion function.
func Convert_genid_GENIDIndex_To_v1alpha1_GENIDIndex(in *genid.GENIDIndex, out *GENIDIndex, s conversion.Scope) error {
	return autoConvert_genid_GENIDIndex_To_v1alpha1_GENIDIndex(in, out, s)
}

func autoConvert_v1alpha1_GENIDIndexList_To_genid_GENIDIndexList(in *GENIDIndexList, out *genid.GENIDIndexList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]genid.GENIDIndex, len(*in))
		for i := range *in {
			if err := Convert_v1alpha1_GENIDIndex_To_genid_GENIDIndex(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

// Convert_v1alpha1_GENIDIndexList_To_genid_GENIDIndexList is an autogenerated conversion function.
func Convert_v1alpha1_GENIDIndexList_To_genid_GENIDIndexList(in *GENIDIndexList, out *genid.GENIDIndexList, s conversion.Scope) error {
	return autoConvert_v1alpha1_GENIDIndexList_To_genid_GENIDIndexList(in, out, s)
}

func autoConvert_genid_GENIDIndexList_To_v1alpha1_GENIDIndexList(in *genid.GENIDIndexList, out *GENIDIndexList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]GENIDIndex, len(*in))
		for i := range *in {
			if err := Convert_genid_GENIDIndex_To_v1alpha1_GENIDIndex(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

// Convert_genid_GENIDIndexList_To_v1alpha1_GENIDIndexList is an autogenerated conversion function.
func Convert_genid_GENIDIndexList_To_v1alpha1_GENIDIndexList(in *genid.GENIDIndexList, out *GENIDIndexList, s conversion.Scope) error {
	return autoConvert_genid_GENIDIndexList_To_v1alpha1_GENIDIndexList(in, out, s)
}

func autoConvert_v1alpha1_GENIDIndexSpec_To_genid_GENIDIndexSpec(in *GENIDIndexSpec, out *genid.GENIDIndexSpec, s conversion.Scope) error {
	out.MinID = (*uint64)(unsafe.Pointer(in.MinID))
	out.MaxID = (*uint64)(unsafe.Pointer(in.MaxID))
	if err := asv1alpha1.Convert_v1alpha1_UserDefinedLabels_To_common_UserDefinedLabels(&in.UserDefinedLabels, &out.UserDefinedLabels, s); err != nil {
		return err
	}
	out.Type = in.Type
	return nil
}

// Convert_v1alpha1_GENIDIndexSpec_To_genid_GENIDIndexSpec is an autogenerated conversion function.
func Convert_v1alpha1_GENIDIndexSpec_To_genid_GENIDIndexSpec(in *GENIDIndexSpec, out *genid.GENIDIndexSpec, s conversion.Scope) error {
	return autoConvert_v1alpha1_GENIDIndexSpec_To_genid_GENIDIndexSpec(in, out, s)
}

func autoConvert_genid_GENIDIndexSpec_To_v1alpha1_GENIDIndexSpec(in *genid.GENIDIndexSpec, out *GENIDIndexSpec, s conversion.Scope) error {
	out.MinID = (*uint64)(unsafe.Pointer(in.MinID))
	out.MaxID = (*uint64)(unsafe.Pointer(in.MaxID))
	if err := asv1alpha1.Convert_common_UserDefinedLabels_To_v1alpha1_UserDefinedLabels(&in.UserDefinedLabels, &out.UserDefinedLabels, s); err != nil {
		return err
	}
	out.Type = in.Type
	return nil
}

// Convert_genid_GENIDIndexSpec_To_v1alpha1_GENIDIndexSpec is an autogenerated conversion function.
func Convert_genid_GENIDIndexSpec_To_v1alpha1_GENIDIndexSpec(in *genid.GENIDIndexSpec, out *GENIDIndexSpec, s conversion.Scope) error {
	return autoConvert_genid_GENIDIndexSpec_To_v1alpha1_GENIDIndexSpec(in, out, s)
}

func autoConvert_v1alpha1_GENIDIndexStatus_To_genid_GENIDIndexStatus(in *GENIDIndexStatus, out *genid.GENIDIndexStatus, s conversion.Scope) error {
	out.MinID = (*uint64)(unsafe.Pointer(in.MinID))
	out.MaxID = (*uint64)(unsafe.Pointer(in.MaxID))
	if err := asv1alpha1.Convert_v1alpha1_ConditionedStatus_To_condition_ConditionedStatus(&in.ConditionedStatus, &out.ConditionedStatus, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1alpha1_GENIDIndexStatus_To_genid_GENIDIndexStatus is an autogenerated conversion function.
func Convert_v1alpha1_GENIDIndexStatus_To_genid_GENIDIndexStatus(in *GENIDIndexStatus, out *genid.GENIDIndexStatus, s conversion.Scope) error {
	return autoConvert_v1alpha1_GENIDIndexStatus_To_genid_GENIDIndexStatus(in, out, s)
}

func autoConvert_genid_GENIDIndexStatus_To_v1alpha1_GENIDIndexStatus(in *genid.GENIDIndexStatus, out *GENIDIndexStatus, s conversion.Scope) error {
	out.MinID = (*uint64)(unsafe.Pointer(in.MinID))
	out.MaxID = (*uint64)(unsafe.Pointer(in.MaxID))
	if err := asv1alpha1.Convert_condition_ConditionedStatus_To_v1alpha1_ConditionedStatus(&in.ConditionedStatus, &out.ConditionedStatus, s); err != nil {
		return err
	}
	return nil
}

// Convert_genid_GENIDIndexStatus_To_v1alpha1_GENIDIndexStatus is an autogenerated conversion function.
func Convert_genid_GENIDIndexStatus_To_v1alpha1_GENIDIndexStatus(in *genid.GENIDIndexStatus, out *GENIDIndexStatus, s conversion.Scope) error {
	return autoConvert_genid_GENIDIndexStatus_To_v1alpha1_GENIDIndexStatus(in, out, s)
}
