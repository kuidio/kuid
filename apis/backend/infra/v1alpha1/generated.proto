/*
Copyright 2024 Nokia.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package github.com.kuidio.kuid.apis.backend.infra.v1alpha1;

import "github.com/kuidio/kuid/apis/common/v1alpha1/generated.proto";
import "github.com/kuidio/kuid/apis/condition/v1alpha1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "github.com/kuidio/kuid/apis/backend/infra/v1alpha1";

// A Cluster represents a kubernetes cluster and is typically used as a nodeGroup identifier.
// +k8s:openapi-gen=true
message Cluster {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ClusterSpec spec = 2;

  optional ClusterStatus status = 3;
}

message ClusterFilter {
  // Name filters by the name of the objects
  optional string name = 1;

  // Namespace filters by the namespace of the objects
  optional string namespace = 2;
}

// ClusterList contains a list of Clusters
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message ClusterList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Cluster items = 2;
}

// ClusterSpec defines the desired state of Cluster
message ClusterSpec {
  // NodeGroup defines the node group the resource belongs to.
  optional string nodeGroup = 1;

  // Provider defines the provider implementing this resource.
  optional string provider = 2;

  // Location defines the location information where this resource is located
  // in lon/lat coordinates
  optional Location location = 3;

  // UserDefinedLabels define metadata to the resource.
  // defined in the spec to distingiush metadata labels from user defined labels
  optional github.com.kuidio.kuid.apis.common.v1alpha1.UserDefinedLabels userDefinedLabels = 4;
}

// ClusterStatus defines the observed state of Cluster
message ClusterStatus {
  // ConditionedStatus provides the status of the IPClain using conditions
  // - a ready condition indicates the overall status of the resource
  optional github.com.kuidio.kuid.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1;
}

// An Endpoint represents a communication interface or connection point within a Node,
// facilitating network communication and data transfer between different components
// or systems within the environment. `Endpoints` serve as gateways for transmitting and
// receiving data, enabling seamless communication between Nodes.
// +k8s:openapi-gen=true
message Endpoint {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional EndpointSpec spec = 2;

  optional EndpointStatus status = 3;
}

message EndpointFilter {
  // Name filters by the name of the objects
  optional string name = 1;

  // Namespace filters by the namespace of the objects
  optional string namespace = 2;
}

message EndpointID {
  optional NodeID nodeID = 6;

  // Endpoint defines the name of the endpoint
  optional string endpoint = 5;
}

// EndpointList contains a list of Endpoints
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message EndpointList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Endpoint items = 2;
}

// A EndpointSet represents a set of endpoints that belong together within a nodeGroup.
// E.g. it can be used to model a logical Link Aggregation group within
// a node or it can be used to represent a logical multi-homing construction
// between a set of nodes belonging to a single nodeGroup.
// +k8s:openapi-gen=true
message EndpointSet {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional EndpointSetSpec spec = 2;

  optional EndpointSetStatus status = 3;
}

message EndpointSetFilter {
  // Name filters by the name of the objects
  optional string name = 1;

  // Namespace filters by the namespace of the objects
  optional string namespace = 2;
}

// EndpointSetList contains a list of EndpointSets
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message EndpointSetList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated EndpointSet items = 2;
}

// EndpointSetSpec defines the desired state of EndpointSet
// An EndpointSet can be a LAG (single Homed) or ESI (multiHomed). The EndpointSet
// can only belong to a single NodeGroup
message EndpointSetSpec {
  // Endpoints defines the Endpoints that are part of the EndpointSet
  // Min 1, Max 16
  repeated EndpointID endpoints = 1;

  // Lacp defines if the lag enabled LACP
  // +optional
  optional bool lacp = 2;

  // UserDefinedLabels define metadata to the resource.
  // defined in the spec to distingiush metadata labels from user defined labels
  optional github.com.kuidio.kuid.apis.common.v1alpha1.UserDefinedLabels userDefinedLabels = 3;
}

// EndpointSetStatus defines the observed state of EndpointSet
message EndpointSetStatus {
  // ConditionedStatus provides the status of the IPClain using conditions
  // - a ready condition indicates the overall status of the resource
  optional github.com.kuidio.kuid.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1;

  // ESI defines the ethernet segment identifier of the logical link
  // if set this is a multi-homed logical endpoint
  // the ESI is a global unique identifier within the administrative domain
  // +optional
  optional uint32 esi = 2;

  // LagId defines the lag id for the logical single-homed or multi-homed
  // endpoint
  // +optional
  optional uint32 lagID = 3;
}

// EndpointSpec defines the desired state of Endpoint
message EndpointSpec {
  // NodeGroupEndpointID identifies the endpoint identity this resource belongs to
  optional NodeGroupEndpointID nodeGroupEndpointID = 1;

  // Module define the module to which the Endpoint belongs
  // +optional
  optional string module = 2;

  // UserDefinedLabels define metadata to the resource.
  // defined in the spec to distingiush metadata labels from user defined labels
  optional github.com.kuidio.kuid.apis.common.v1alpha1.UserDefinedLabels userDefinedLabels = 3;

  // (Gbps)
  optional string speed = 4;

  // VLANTagging defines if VLAN tagging is enabled or disabled on the interface
  optional bool vlanTagging = 5;
}

// EndpointStatus defines the observed state of Endpoint
message EndpointStatus {
  // ConditionedStatus provides the status of the IPClain using conditions
  // - a ready condition indicates the overall status of the resource
  optional github.com.kuidio.kuid.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1;
}

// A link represents a physical/logical connection that enables communication and data transfer
// between 2 endpoints of a node.
// +k8s:openapi-gen=true
message Link {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional LinkSpec spec = 2;

  optional LinkStatus status = 3;
}

message LinkFilter {
  // Name filters by the name of the objects
  optional string name = 1;

  // Namespace filters by the namespace of the objects
  optional string namespace = 2;
}

// LinkList contains a list of Links
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message LinkList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Link items = 2;
}

// A linkSet represents a set of links that belong together within a node group or accross nodeGroups.
// E.g. it can be used to model a logical Link Aggregation group between 2 nodes or
// it can be used to represent a logical multi-homing construction between a set of nodes
// belonging to 1 or multiple nodeGroups/Topologies.
// +k8s:openapi-gen=true
message LinkSet {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional LinkSetSpec spec = 2;

  optional LinkSetStatus status = 3;
}

message LinkSetFilter {
  // Name filters by the name of the objects
  optional string name = 1;

  // Namespace filters by the namespace of the objects
  optional string namespace = 2;
}

// LinkSetList contains a list of LinkSets
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message LinkSetList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated LinkSet items = 2;
}

// LinkSetSpec defines the desired state of LinkSet
message LinkSetSpec {
  // Endpoints define the endpoint identifiers of the LinkSet
  repeated EndpointID endpoints = 1;

  // UserDefinedLabels define metadata to the resource.
  // defined in the spec to distingiush metadata labels from user defined labels
  optional github.com.kuidio.kuid.apis.common.v1alpha1.UserDefinedLabels userDefinedLabels = 2;
}

// LinkSetStatus defines the observed state of LinkSet
message LinkSetStatus {
  // ConditionedStatus provides the status of the IPClain using conditions
  // - a ready condition indicates the overall status of the resource
  optional github.com.kuidio.kuid.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1;

  // ESI defines the ethernet segment identifier of the logical link
  // if set this is a multi-homed linkset
  // the ESI is a global unique identifier within the administrative domain/topology
  optional uint32 esi = 2;

  // LagId defines the lag id for the logical single-homed or multi-homed
  // endpoint
  optional uint32 lagId = 3;
}

// LinkSpec defines the desired state of Link
message LinkSpec {
  // Endpoints define the 2 endpoint identifiers of the link
  // Can only have 2 endpoints
  repeated NodeGroupEndpointID endpoints = 1;

  // UserDefinedLabels define metadata to the resource.
  // defined in the spec to distingiush metadata labels from user defined labels
  optional github.com.kuidio.kuid.apis.common.v1alpha1.UserDefinedLabels userDefinedLabels = 2;
}

// LinkStatus defines the observed state of Link
message LinkStatus {
  // ConditionedStatus provides the status of the IPClain using conditions
  // - a ready condition indicates the overall status of the resource
  optional github.com.kuidio.kuid.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1;
}

message Location {
  optional string latitude = 1;

  optional string longitude = 2;
}

// A module refers to a hardware component or expansion module that can be installed within a ModuleBay of a Node.
// Modules provide additional functionality and capabilities to the infrastructure environment,
// allowing users to enhance and customize their deployments according to specific requirements.
// +k8s:openapi-gen=true
message Module {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ModuleSpec spec = 2;

  optional ModuleStatus status = 3;
}

// A ModuleBay serves as a modular slot or enclosure within a Node, designed to accommodate additional modules.
// ModuleBays provide a flexible and scalable approach to extending the capabilities of Nodes,
// allowing users to customize and enhance their infrastructure deployments according to specific requirements.
// +k8s:openapi-gen=true
message ModuleBay {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ModuleBaySpec spec = 2;

  optional ModuleBayStatus status = 3;
}

message ModuleBayFilter {
  // Name filters by the name of the objects
  optional string name = 1;

  // Namespace filters by the namespace of the objects
  optional string namespace = 2;
}

// ModuleBayList contains a list of ModuleBays
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message ModuleBayList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated ModuleBay items = 2;
}

// ModuleBaySpec defines the desired state of ModuleBay
message ModuleBaySpec {
  // NodeID identifies the node identity this resource belongs to
  optional NodeID nodeID = 1;

  // Position defines the position in the node the moduleBay is deployed
  optional string psoition = 2;

  // UserDefinedLabels define metadata to the resource.
  // defined in the spec to distingiush metadata labels from user defined labels
  optional github.com.kuidio.kuid.apis.common.v1alpha1.UserDefinedLabels userDefinedLabels = 3;
}

// ModuleBayStatus defines the observed state of ModuleBay
message ModuleBayStatus {
  // ConditionedStatus provides the status of the IPClain using conditions
  // - a ready condition indicates the overall status of the resource
  optional github.com.kuidio.kuid.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1;
}

message ModuleFilter {
  // Name filters by the name of the objects
  optional string name = 1;

  // Namespace filters by the namespace of the objects
  optional string namespace = 2;
}

// ModuleList contains a list of Modules
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message ModuleList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Module items = 2;
}

// ModuleSpec defines the desired state of Module
message ModuleSpec {
  // NodeID identifies the node identity this resource belongs to
  optional NodeID nodeID = 1;

  // ModuelBay defines the bay in which the module is deployed
  optional string moduleBay = 2;

  // UserDefinedLabels define metadata to the resource.
  // defined in the spec to distingiush metadata labels from user defined labels
  optional github.com.kuidio.kuid.apis.common.v1alpha1.UserDefinedLabels userDefinedLabels = 3;
}

// ModuleStatus defines the observed state of Module
message ModuleStatus {
  // ConditionedStatus provides the status of the IPClain using conditions
  // - a ready condition indicates the overall status of the resource
  optional github.com.kuidio.kuid.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1;
}

// A Node represents a fundamental unit that implements compute, storage, and/or networking within your environment.
// Nodes can embody physical, virtual, or containerized entities, offering versatility in deployment options to suit
// diverse infrastructure requirements.
// Nodes are logically organized within racks and sites/regions, establishing a hierarchical structure for efficient
// resource management and organization. Additionally, Nodes are associated with nodeGroups, facilitating centralized
// management and control within defined administrative boundaries.
// Each Node is assigned a provider, representing the entity responsible for implementing the specifics of the Node.
// +k8s:openapi-gen=true
message Node {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional NodeSpec spec = 2;

  optional NodeStatus status = 3;
}

message NodeFilter {
  // Name filters by the name of the objects
  optional string name = 1;

  // Namespace filters by the namespace of the objects
  optional string namespace = 2;
}

// A NodeGrouo represents a logical grouping of infrastructure resources managed by a single
// administrative entity or organization. NodeGroups serve as administrative boundaries within the environment,
// providing a structured framework for organizing and managing resources based on administrative ownership
// or responsibility. E.g. A NodeGroup on one hand, can be used to represent a topology that spans multiple
// sites and regions, but a NodeGroup can also be used to group all nodes of a NodeGroup together.
// +k8s:openapi-gen=true
message NodeGroup {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional NodeGroupSpec spec = 2;

  optional NodeGroupStatus status = 3;
}

message NodeGroupEndpointID {
  // NodeGroup defines the node group the resource belongs to.
  optional string nodeGroup = 1;

  // EndpointID defines the endpointID
  optional EndpointID endpointID = 2;
}

message NodeGroupFilter {
  // Name filters by the name of the objects
  optional string name = 1;

  // Namespace filters by the namespace of the objects
  optional string namespace = 2;
}

// NodeGroupList contains a list of NodeGroups
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message NodeGroupList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated NodeGroup items = 2;
}

message NodeGroupNodeID {
  // NodeGroup defines the node group the resource belongs to.
  optional string nodeGroup = 1;

  // NodeID defines the nodeID
  optional NodeID nodeID = 2;
}

// NodeGroupSpec defines the desired state of NodeGroup
// E.g. A nodeGroup can be a NodeGroup
// E.g. A nodeGroup can be a topology like a DC fabric (frontend and backend could be a different nodeGroup)
// A Node Group is a global unique identifier within the system e.g. representing a topology, a NodeGroup or
// another set of elements that are managed together by a single entity
message NodeGroupSpec {
  // UserDefinedLabels define metadata to the resource.
  // defined in the spec to distingiush metadata labels from user defined labels
  optional github.com.kuidio.kuid.apis.common.v1alpha1.UserDefinedLabels userDefinedLabels = 1;
}

// NodeGroupStatus defines the observed state of NodeGroup
message NodeGroupStatus {
  // ConditionedStatus provides the status of the IPClain using conditions
  // - a ready condition indicates the overall status of the resource
  optional github.com.kuidio.kuid.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1;
}

message NodeID {
  optional SiteID siteID = 1;

  // Node defines the node the resource belongs to.
  optional string node = 2;
}

// A NodeItem represents a specific hardware component or accessory associated with a Node.
// NodeItems represent a wide range of hardware elements, e.g Fan(s), PowerUnit(s), CPU(s),
// and other peripheral devices essential for the operation of the Node.
// NodeItem is used to represent the modular components of a node.
// +k8s:openapi-gen=true
message NodeItem {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional NodeItemSpec spec = 2;

  optional NodeItemStatus status = 3;
}

message NodeItemFilter {
  // Name filters by the name of the objects
  optional string name = 1;

  // Namespace filters by the namespace of the objects
  optional string namespace = 2;
}

// NodeItemList contains a list of NodeItems
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message NodeItemList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated NodeItem items = 2;
}

// NodeItemSpec defines the desired state of NodeItem
message NodeItemSpec {
  // NodeID identifies the node identity this resource belongs to
  optional NodeID nodeID = 1;

  // UserDefinedLabels define metadata to the resource.
  // defined in the spec to distingiush metadata labels from user defined labels
  optional github.com.kuidio.kuid.apis.common.v1alpha1.UserDefinedLabels userDefinedLabels = 2;
}

// NodeItemStatus defines the observed state of NodeItem
message NodeItemStatus {
  // ConditionedStatus provides the status of the IPClain using conditions
  // - a ready condition indicates the overall status of the resource
  optional github.com.kuidio.kuid.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1;
}

// NodeList contains a list of Nodes
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message NodeList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Node items = 2;
}

// A NodeSet represents a set of nodes.
// E.g. it can be used to model a set of nodes in a NodeSet that share the same
// charecteristics wrt, Numa, interfaces, etc.
// Another usage of NodeSet is the representation of a virtual Node that consists of multiple nodes.
// +k8s:openapi-gen=true
message NodeSet {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional NodeSetSpec spec = 2;

  optional NodeSetStatus status = 3;
}

message NodeSetFilter {
  // Name filters by the name of the objects
  optional string name = 1;

  // Namespace filters by the namespace of the objects
  optional string namespace = 2;
}

// NodeSetList contains a list of NodeSets
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message NodeSetList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated NodeSet items = 2;
}

// NodeSetSetSpec defines the desired state of NodeSet
message NodeSetSpec {
  // NodeGroupName identifies the nodeGroup this resource belongs to
  // E.g. a NodeSet in a NodeSet belongs to a nodeGroup where the name of the nodeGroup is the NodeSet
  // E.g. a Virtual Node, belongs to a nodeGroup where the name of the nodeGroup represents the topology this node is deployed in
  optional string nodeGroup = 1;

  // UserDefinedLabels define metadata to the resource.
  // defined in the spec to distingiush metadata labels from user defined labels
  optional github.com.kuidio.kuid.apis.common.v1alpha1.ClaimLabels userDefinedLabels = 2;
}

// NodeSetStatus defines the observed state of NodeSet
message NodeSetStatus {
  // ConditionedStatus provides the status of the IPClain using conditions
  // - a ready condition indicates the overall status of the resource
  optional github.com.kuidio.kuid.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1;
}

// NodeSpec defines the desired state of Node
message NodeSpec {
  // NodeGroupNodeID identifies the nodeGroup identity this resource belongs to
  optional NodeGroupNodeID nodeGroupID = 1;

  // Rack defines the rack in which the node is deployed
  // +optional
  optional string rack = 2;

  // relative position in the rack
  // +optional
  optional string position = 3;

  // Location defines the location information where this resource is located
  // in lon/lat coordinates
  // +optional
  optional Location location = 4;

  // Provider defines the provider implementing this resource.
  optional string provider = 5;

  // UserDefinedLabels define metadata to the resource.
  // defined in the spec to distingiush metadata labels from user defined labels
  optional github.com.kuidio.kuid.apis.common.v1alpha1.UserDefinedLabels userDefinedLabels = 6;
}

// NodeStatus defines the observed state of Node
message NodeStatus {
  // ConditionedStatus provides the status of the IPClain using conditions
  // - a ready condition indicates the overall status of the resource
  optional github.com.kuidio.kuid.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1;
}

// A rack represents a physical equipment rack within your environment. Each rack is designed to accommodate
// the installation of devices and equipment.
// +k8s:openapi-gen=true
message Rack {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional RackSpec spec = 2;

  optional RackStatus status = 3;
}

message RackFilter {
  // Name filters by the name of the objects
  optional string name = 1;

  // Namespace filters by the namespace of the objects
  optional string namespace = 2;
}

// RackList contains a list of Racks
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message RackList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Rack items = 2;
}

// RackSpec defines the desired state of Rack
message RackSpec {
  // SiteID identifies the siteID this resource belongs to
  optional SiteID siteID = 1;

  // Location defines the location information where this resource is located
  // in lon/lat coordinates
  optional Location location = 2;

  // The height of the rack, measured in units.
  optional string height = 3;

  // The canonical distance between the two vertical rails on a face. In inch
  optional string width = 4;

  // UserDefinedLabels define metadata to the resource.
  // defined in the spec to distingiush metadata labels from user defined label
  optional github.com.kuidio.kuid.apis.common.v1alpha1.UserDefinedLabels userDefinedLabels = 5;
}

// RackStatus defines the observed state of Rack
message RackStatus {
  // ConditionedStatus provides the status of the IPClain using conditions
  // - a ready condition indicates the overall status of the resource
  optional github.com.kuidio.kuid.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1;
}

// A region represent a geography in which multiple infrastructure resources are grouped
// A region might represent a continent, country, city, campus, or other area depending on your environment.
// +k8s:openapi-gen=true
message Region {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional RegionSpec spec = 2;

  optional RegionStatus status = 3;
}

message RegionFilter {
  // Name filters by the name of the objects
  optional string name = 1;

  // Namespace filters by the namespace of the objects
  optional string namespace = 2;
}

// RegionList contains a list of Regions
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message RegionList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Region items = 2;
}

// RegionSpec defines the desired state of Region
message RegionSpec {
  // UserDefinedLabels define metadata to the resource.
  // defined in the spec to distingiush metadata labels from user defined labels
  optional github.com.kuidio.kuid.apis.common.v1alpha1.UserDefinedLabels userDefinedLabels = 1;
}

// RegionStatus defines the observed state of Region
message RegionStatus {
  // ConditionedStatus provides the status of the IPClain using conditions
  // - a ready condition indicates the overall status of the resource
  optional github.com.kuidio.kuid.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1;
}

// A site serves as a fundamental organizational unit for managing infrastructure resources within your environment.
// The utilization of sites may vary based on the organizational structure and requirements,
// but in essence, each site typically corresponds to a distinct building or campus.
// +k8s:openapi-gen=true
message Site {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional SiteSpec spec = 2;

  optional SiteStatus status = 3;
}

message SiteFilter {
  // Name filters by the name of the objects
  optional string name = 1;

  // Namespace filters by the namespace of the objects
  optional string namespace = 2;
}

message SiteID {
  // Region defines the region this sites belongs to
  optional string region = 1;

  // Site defines the site in which the node is deployed
  optional string site = 2;
}

// SiteList contains a list of Sites
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message SiteList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Site items = 2;
}

// SiteSpec defines the desired state of Site
message SiteSpec {
  // Region defines the region this sites belongs to
  optional string region = 1;

  // Location defines the location information where this resource is located
  // in lon/lat coordinates
  optional Location location = 2;

  // UserDefinedLabels define metadata to the resource.
  // defined in the spec to distingiush metadata labels from user defined labels
  optional github.com.kuidio.kuid.apis.common.v1alpha1.UserDefinedLabels userDefinedLabels = 3;
}

// SiteStatus defines the observed state of Site
message SiteStatus {
  // ConditionedStatus provides the status of the IPClain using conditions
  // - a ready condition indicates the overall status of the resource
  optional github.com.kuidio.kuid.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1;
}

