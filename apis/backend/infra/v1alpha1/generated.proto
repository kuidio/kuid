/*
Copyright 2024 Nokia.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package github.com.kuidio.kuid.apis.backend.infra.v1alpha1;

import "github.com/kuidio/kuid/apis/common/v1alpha1/generated.proto";
import "github.com/kuidio/kuid/apis/condition/v1alpha1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "github.com/kuidio/kuid/apis/backend/infra/v1alpha1";

// Cluster is the Schema for the Cluster API
//
// +k8s:openapi-gen=true
message Cluster {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ClusterSpec spec = 2;

  optional ClusterStatus status = 3;
}

// ClusterList contains a list of Clusters
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message ClusterList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Cluster items = 2;
}

// ClusterSpec defines the desired state of Cluster
message ClusterSpec {
  // Domain defines the administrative domain the resource belongs to.
  optional string domain = 1;

  // Provider defines the provider implementing this resource.
  optional string provider = 2;

  // Location defines the location information where this resource is located
  // in lon/lat coordinates
  optional Location location = 3;

  // UserDefinedLabels define metadata to the resource.
  // defined in the spec to distingiush metadata labels from user defined labels
  optional github.com.kuidio.kuid.apis.common.v1alpha1.UserDefinedLabels userDefinedLabels = 4;
}

// ClusterStatus defines the observed state of Cluster
message ClusterStatus {
  // ConditionedStatus provides the status of the IPClain using conditions
  // - a ready condition indicates the overall status of the resource
  optional github.com.kuidio.kuid.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1;
}

// Domain is the Schema for the Domain API
//
// +k8s:openapi-gen=true
message Domain {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional DomainSpec spec = 2;

  optional DomainStatus status = 3;
}

// DomainList contains a list of Domains
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message DomainList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Domain items = 2;
}

// DomainSpec defines the desired state of Domain
message DomainSpec {
  // UserDefinedLabels define metadata to the resource.
  // defined in the spec to distingiush metadata labels from user defined labels
  optional github.com.kuidio.kuid.apis.common.v1alpha1.UserDefinedLabels userDefinedLabels = 3;
}

// DomainStatus defines the observed state of Domain
message DomainStatus {
  // ConditionedStatus provides the status of the IPClain using conditions
  // - a ready condition indicates the overall status of the resource
  optional github.com.kuidio.kuid.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1;
}

// Endpoint is the Schema for the Endpoint API
//
// +k8s:openapi-gen=true
message Endpoint {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional EndpointSpec spec = 2;

  optional EndpointStatus status = 3;
}

message EndpointID {
  // Node defines the node to which this interface belongs
  optional string node = 1;

  // Interface defines the name of the interface
  optional string interface = 2;
}

// EndpointList contains a list of Endpoints
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message EndpointList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Endpoint items = 2;
}

// EndpointSpec defines the desired state of Endpoint
message EndpointSpec {
  // Domain defines the administrative domain the resource belongs to.
  optional string domain = 1;

  // EndpointID defines the Endpoint identifier
  optional EndpointID EndpointID = 2;

  // Module define the module to which the Endpoint belongs
  // +optional
  optional string module = 3;

  // UserDefinedLabels define metadata to the resource.
  // defined in the spec to distingiush metadata labels from user defined labels
  optional github.com.kuidio.kuid.apis.common.v1alpha1.UserDefinedLabels userDefinedLabels = 4;
}

// EndpointStatus defines the observed state of Endpoint
message EndpointStatus {
  // ConditionedStatus provides the status of the IPClain using conditions
  // - a ready condition indicates the overall status of the resource
  optional github.com.kuidio.kuid.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1;
}

// Link is the Schema for the Link API
//
// +k8s:openapi-gen=true
message Link {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional LinkSpec spec = 2;

  optional LinkStatus status = 3;
}

message LinkEndpointID {
  // Domain defines the administrative domain the resource belongs to.
  optional string domain = 1;

  // Interface identifier within the domain
  optional EndpointID endpointID = 2;
}

// LinkList contains a list of Links
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message LinkList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Link items = 2;
}

// LinkSet is the Schema for the LinkSet API
//
// +k8s:openapi-gen=true
message LinkSet {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional LinkSetSpec spec = 2;

  optional LinkSetStatus status = 3;
}

// LinkSetList contains a list of LinkSets
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message LinkSetList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated LinkSet items = 2;
}

// LinkSetSpec defines the desired state of LinkSet
message LinkSetSpec {
  // Endpoints define the endpoint identifiers of the LinkSet
  repeated EndpointID endpoints = 1;

  // UserDefinedLabels define metadata to the resource.
  // defined in the spec to distingiush metadata labels from user defined labels
  optional github.com.kuidio.kuid.apis.common.v1alpha1.UserDefinedLabels userDefinedLabels = 3;
}

// LinkSetStatus defines the observed state of LinkSet
message LinkSetStatus {
  // ConditionedStatus provides the status of the IPClain using conditions
  // - a ready condition indicates the overall status of the resource
  optional github.com.kuidio.kuid.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1;

  // ESI defines the ethernet segment identifier of the logical link
  // if set this is a multi-homed linkset
  // the ESI is a global unique identifier within the administrative domain/topology
  optional uint32 esi = 2;

  // LagId defines the lag id for the logical single-homed or multi-homed
  // endpoint
  optional uint32 lagId = 3;
}

// LinkSpec defines the desired state of Link
message LinkSpec {
  // Endpoints define the 2 endpoint identifiers of the link
  repeated LinkEndpointID endpoints = 1;

  // UserDefinedLabels define metadata to the resource.
  // defined in the spec to distingiush metadata labels from user defined labels
  optional github.com.kuidio.kuid.apis.common.v1alpha1.UserDefinedLabels userDefinedLabels = 3;
}

// LinkStatus defines the observed state of Link
message LinkStatus {
  // ConditionedStatus provides the status of the IPClain using conditions
  // - a ready condition indicates the overall status of the resource
  optional github.com.kuidio.kuid.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1;
}

message Location {
  optional string latitude = 1;

  optional string longitude = 2;
}

// Module is the Schema for the Module API
//
// +k8s:openapi-gen=true
message Module {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ModuleSpec spec = 2;

  optional ModuleStatus status = 3;
}

// ModuleBay is the Schema for the ModuleBay API
//
// +k8s:openapi-gen=true
message ModuleBay {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ModuleBaySpec spec = 2;

  optional ModuleBayStatus status = 3;
}

// ModuleBayList contains a list of ModuleBays
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message ModuleBayList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated ModuleBay items = 2;
}

// ModuleBaySpec defines the desired state of ModuleBay
message ModuleBaySpec {
  // Domain defines the administrative domain the resource belongs to.
  optional string domain = 1;

  // Node defines the node to which this interface belongs
  optional string node = 2;

  // Position defines the position in the node the moduleBay is deployed
  optional string psoition = 3;

  // UserDefinedLabels define metadata to the resource.
  // defined in the spec to distingiush metadata labels from user defined labels
  optional github.com.kuidio.kuid.apis.common.v1alpha1.UserDefinedLabels userDefinedLabels = 4;
}

// ModuleBayStatus defines the observed state of ModuleBay
message ModuleBayStatus {
  // ConditionedStatus provides the status of the IPClain using conditions
  // - a ready condition indicates the overall status of the resource
  optional github.com.kuidio.kuid.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1;
}

// ModuleList contains a list of Modules
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message ModuleList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Module items = 2;
}

// ModuleSpec defines the desired state of Module
message ModuleSpec {
  // Domain defines the administrative domain the resource belongs to.
  optional string domain = 1;

  // Node defines the node to which this interface belongs
  optional string node = 2;

  // ModuelBay defines the bay in which the module is deployed
  optional string moduleBay = 3;

  // UserDefinedLabels define metadata to the resource.
  // defined in the spec to distingiush metadata labels from user defined labels
  optional github.com.kuidio.kuid.apis.common.v1alpha1.UserDefinedLabels userDefinedLabels = 4;
}

// ModuleStatus defines the observed state of Module
message ModuleStatus {
  // ConditionedStatus provides the status of the IPClain using conditions
  // - a ready condition indicates the overall status of the resource
  optional github.com.kuidio.kuid.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1;
}

// Node is the Schema for the Node API
//
// +k8s:openapi-gen=true
message Node {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional NodeSpec spec = 2;

  optional NodeStatus status = 3;
}

// NodeList contains a list of Nodes
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message NodeList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Node items = 2;
}

// NodeSet is the Schema for the NodeSet API
//
// +k8s:openapi-gen=true
message NodeSet {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional NodeSetSpec spec = 2;

  optional NodeSetStatus status = 3;
}

// NodeSetList contains a list of NodeSets
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message NodeSetList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated NodeSet items = 2;
}

// NodeSetSetSpec defines the desired state of NodeSet
message NodeSetSpec {
  // Domain defines the administrative domain the resource belongs to.
  optional string domain = 1;

  // Cluster to which this nodeSet is assocated
  optional string cluster = 2;

  // UserDefinedLabels define metadata to the resource.
  // defined in the spec to distingiush metadata labels from user defined labels
  optional github.com.kuidio.kuid.apis.common.v1alpha1.ClaimLabels userDefinedLabels = 3;
}

// NodeSetStatus defines the observed state of NodeSet
message NodeSetStatus {
  // ConditionedStatus provides the status of the IPClain using conditions
  // - a ready condition indicates the overall status of the resource
  optional github.com.kuidio.kuid.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1;
}

// NodeSpec defines the desired state of Node
message NodeSpec {
  // Domain defines the administrative domain the resource belongs to.
  optional string domain = 1;

  // Site defines the site on which the node is deployed
  optional string site = 2;

  // Rack defines the rack in which the node is deployed
  // +optional
  optional string rack = 3;

  // Location defines the location information where this resource is located
  // in lon/lat coordinates
  optional Location location = 5;

  // Provider defines the provider implementing this resource.
  optional string provider = 4;

  // UserDefinedLabels define metadata to the resource.
  // defined in the spec to distingiush metadata labels from user defined labels
  optional github.com.kuidio.kuid.apis.common.v1alpha1.UserDefinedLabels userDefinedLabels = 6;
}

// NodeStatus defines the observed state of Node
message NodeStatus {
  // ConditionedStatus provides the status of the IPClain using conditions
  // - a ready condition indicates the overall status of the resource
  optional github.com.kuidio.kuid.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1;
}

message ObjectReference {
  // APIVersion of the target resources
  optional string apiVersion = 1;

  // Kind of the target resources
  optional string kind = 2;

  // Name of the target resource
  // +optional
  optional string name = 3;
}

// Rack is the Schema for the Rack API
//
// +k8s:openapi-gen=true
message Rack {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional RackSpec spec = 2;

  optional RackStatus status = 3;
}

// RackList contains a list of Racks
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message RackList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Rack items = 2;
}

// RackSpec defines the desired state of Rack
message RackSpec {
  // Location defines the location information where this resource is located
  // in lon/lat coordinates
  optional Location location = 2;

  // UserDefinedLabels define metadata to the resource.
  // defined in the spec to distingiush metadata labels from user defined labels
  optional github.com.kuidio.kuid.apis.common.v1alpha1.UserDefinedLabels userDefinedLabels = 3;
}

// RackStatus defines the observed state of Rack
message RackStatus {
  // ConditionedStatus provides the status of the IPClain using conditions
  // - a ready condition indicates the overall status of the resource
  optional github.com.kuidio.kuid.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1;
}

// Site is the Schema for the Site API
//
// +k8s:openapi-gen=true
message Site {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional SiteSpec spec = 2;

  optional SiteStatus status = 3;
}

// SiteList contains a list of Sites
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message SiteList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Site items = 2;
}

// SiteSpec defines the desired state of Site
message SiteSpec {
  // Location defines the location information where this resource is located
  // in lon/lat coordinates
  optional Location location = 2;

  // UserDefinedLabels define metadata to the resource.
  // defined in the spec to distingiush metadata labels from user defined labels
  optional github.com.kuidio.kuid.apis.common.v1alpha1.UserDefinedLabels userDefinedLabels = 3;
}

// SiteStatus defines the observed state of Site
message SiteStatus {
  // ConditionedStatus provides the status of the IPClain using conditions
  // - a ready condition indicates the overall status of the resource
  optional github.com.kuidio.kuid.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1;
}

