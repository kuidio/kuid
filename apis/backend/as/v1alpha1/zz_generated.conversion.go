//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2024 Nokia.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by conversion-gen. DO NOT EDIT.

package v1alpha1

import (
	unsafe "unsafe"

	condition "github.com/kform-dev/choreo/apis/condition"
	conditionv1alpha1 "github.com/kform-dev/choreo/apis/condition/v1alpha1"
	backend "github.com/kuidio/kuid/apis/backend"
	as "github.com/kuidio/kuid/apis/backend/as"
	common "github.com/kuidio/kuid/apis/common"
	commonv1alpha1 "github.com/kuidio/kuid/apis/common/v1alpha1"
	conversion "k8s.io/apimachinery/pkg/conversion"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

func init() {
	localSchemeBuilder.Register(RegisterConversions)
}

// RegisterConversions adds conversion functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterConversions(s *runtime.Scheme) error {
	if err := s.AddGeneratedConversionFunc((*ASClaim)(nil), (*as.ASClaim)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_ASClaim_To_as_ASClaim(a.(*ASClaim), b.(*as.ASClaim), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*as.ASClaim)(nil), (*ASClaim)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_as_ASClaim_To_v1alpha1_ASClaim(a.(*as.ASClaim), b.(*ASClaim), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*ASClaimList)(nil), (*as.ASClaimList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_ASClaimList_To_as_ASClaimList(a.(*ASClaimList), b.(*as.ASClaimList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*as.ASClaimList)(nil), (*ASClaimList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_as_ASClaimList_To_v1alpha1_ASClaimList(a.(*as.ASClaimList), b.(*ASClaimList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*ASClaimSpec)(nil), (*as.ASClaimSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_ASClaimSpec_To_as_ASClaimSpec(a.(*ASClaimSpec), b.(*as.ASClaimSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*as.ASClaimSpec)(nil), (*ASClaimSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_as_ASClaimSpec_To_v1alpha1_ASClaimSpec(a.(*as.ASClaimSpec), b.(*ASClaimSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*ASClaimStatus)(nil), (*as.ASClaimStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_ASClaimStatus_To_as_ASClaimStatus(a.(*ASClaimStatus), b.(*as.ASClaimStatus), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*as.ASClaimStatus)(nil), (*ASClaimStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_as_ASClaimStatus_To_v1alpha1_ASClaimStatus(a.(*as.ASClaimStatus), b.(*ASClaimStatus), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*ASEntry)(nil), (*as.ASEntry)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_ASEntry_To_as_ASEntry(a.(*ASEntry), b.(*as.ASEntry), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*as.ASEntry)(nil), (*ASEntry)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_as_ASEntry_To_v1alpha1_ASEntry(a.(*as.ASEntry), b.(*ASEntry), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*ASEntryList)(nil), (*as.ASEntryList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_ASEntryList_To_as_ASEntryList(a.(*ASEntryList), b.(*as.ASEntryList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*as.ASEntryList)(nil), (*ASEntryList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_as_ASEntryList_To_v1alpha1_ASEntryList(a.(*as.ASEntryList), b.(*ASEntryList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*ASEntrySpec)(nil), (*as.ASEntrySpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_ASEntrySpec_To_as_ASEntrySpec(a.(*ASEntrySpec), b.(*as.ASEntrySpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*as.ASEntrySpec)(nil), (*ASEntrySpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_as_ASEntrySpec_To_v1alpha1_ASEntrySpec(a.(*as.ASEntrySpec), b.(*ASEntrySpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*ASEntryStatus)(nil), (*as.ASEntryStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_ASEntryStatus_To_as_ASEntryStatus(a.(*ASEntryStatus), b.(*as.ASEntryStatus), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*as.ASEntryStatus)(nil), (*ASEntryStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_as_ASEntryStatus_To_v1alpha1_ASEntryStatus(a.(*as.ASEntryStatus), b.(*ASEntryStatus), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*ASIndex)(nil), (*as.ASIndex)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_ASIndex_To_as_ASIndex(a.(*ASIndex), b.(*as.ASIndex), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*as.ASIndex)(nil), (*ASIndex)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_as_ASIndex_To_v1alpha1_ASIndex(a.(*as.ASIndex), b.(*ASIndex), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*ASIndexClaim)(nil), (*as.ASIndexClaim)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_ASIndexClaim_To_as_ASIndexClaim(a.(*ASIndexClaim), b.(*as.ASIndexClaim), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*as.ASIndexClaim)(nil), (*ASIndexClaim)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_as_ASIndexClaim_To_v1alpha1_ASIndexClaim(a.(*as.ASIndexClaim), b.(*ASIndexClaim), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*ASIndexList)(nil), (*as.ASIndexList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_ASIndexList_To_as_ASIndexList(a.(*ASIndexList), b.(*as.ASIndexList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*as.ASIndexList)(nil), (*ASIndexList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_as_ASIndexList_To_v1alpha1_ASIndexList(a.(*as.ASIndexList), b.(*ASIndexList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*ASIndexSpec)(nil), (*as.ASIndexSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_ASIndexSpec_To_as_ASIndexSpec(a.(*ASIndexSpec), b.(*as.ASIndexSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*as.ASIndexSpec)(nil), (*ASIndexSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_as_ASIndexSpec_To_v1alpha1_ASIndexSpec(a.(*as.ASIndexSpec), b.(*ASIndexSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*ASIndexStatus)(nil), (*as.ASIndexStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_ASIndexStatus_To_as_ASIndexStatus(a.(*ASIndexStatus), b.(*as.ASIndexStatus), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*as.ASIndexStatus)(nil), (*ASIndexStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_as_ASIndexStatus_To_v1alpha1_ASIndexStatus(a.(*as.ASIndexStatus), b.(*ASIndexStatus), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*common.ClaimLabels)(nil), (*commonv1alpha1.ClaimLabels)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_common_ClaimLabels_To_v1alpha1_ClaimLabels(a.(*common.ClaimLabels), b.(*commonv1alpha1.ClaimLabels), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*common.UserDefinedLabels)(nil), (*commonv1alpha1.UserDefinedLabels)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_common_UserDefinedLabels_To_v1alpha1_UserDefinedLabels(a.(*common.UserDefinedLabels), b.(*commonv1alpha1.UserDefinedLabels), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*condition.Condition)(nil), (*conditionv1alpha1.Condition)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_condition_Condition_To_v1alpha1_Condition(a.(*condition.Condition), b.(*conditionv1alpha1.Condition), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*condition.ConditionedStatus)(nil), (*conditionv1alpha1.ConditionedStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_condition_ConditionedStatus_To_v1alpha1_ConditionedStatus(a.(*condition.ConditionedStatus), b.(*conditionv1alpha1.ConditionedStatus), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*commonv1alpha1.ClaimLabels)(nil), (*common.ClaimLabels)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_ClaimLabels_To_common_ClaimLabels(a.(*commonv1alpha1.ClaimLabels), b.(*common.ClaimLabels), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*conditionv1alpha1.Condition)(nil), (*condition.Condition)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_Condition_To_condition_Condition(a.(*conditionv1alpha1.Condition), b.(*condition.Condition), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*conditionv1alpha1.ConditionedStatus)(nil), (*condition.ConditionedStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_ConditionedStatus_To_condition_ConditionedStatus(a.(*conditionv1alpha1.ConditionedStatus), b.(*condition.ConditionedStatus), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*commonv1alpha1.UserDefinedLabels)(nil), (*common.UserDefinedLabels)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_UserDefinedLabels_To_common_UserDefinedLabels(a.(*commonv1alpha1.UserDefinedLabels), b.(*common.UserDefinedLabels), scope)
	}); err != nil {
		return err
	}
	return nil
}

func autoConvert_v1alpha1_ASClaim_To_as_ASClaim(in *ASClaim, out *as.ASClaim, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1alpha1_ASClaimSpec_To_as_ASClaimSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_v1alpha1_ASClaimStatus_To_as_ASClaimStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1alpha1_ASClaim_To_as_ASClaim is an autogenerated conversion function.
func Convert_v1alpha1_ASClaim_To_as_ASClaim(in *ASClaim, out *as.ASClaim, s conversion.Scope) error {
	return autoConvert_v1alpha1_ASClaim_To_as_ASClaim(in, out, s)
}

func autoConvert_as_ASClaim_To_v1alpha1_ASClaim(in *as.ASClaim, out *ASClaim, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_as_ASClaimSpec_To_v1alpha1_ASClaimSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_as_ASClaimStatus_To_v1alpha1_ASClaimStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

// Convert_as_ASClaim_To_v1alpha1_ASClaim is an autogenerated conversion function.
func Convert_as_ASClaim_To_v1alpha1_ASClaim(in *as.ASClaim, out *ASClaim, s conversion.Scope) error {
	return autoConvert_as_ASClaim_To_v1alpha1_ASClaim(in, out, s)
}

func autoConvert_v1alpha1_ASClaimList_To_as_ASClaimList(in *ASClaimList, out *as.ASClaimList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]as.ASClaim, len(*in))
		for i := range *in {
			if err := Convert_v1alpha1_ASClaim_To_as_ASClaim(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

// Convert_v1alpha1_ASClaimList_To_as_ASClaimList is an autogenerated conversion function.
func Convert_v1alpha1_ASClaimList_To_as_ASClaimList(in *ASClaimList, out *as.ASClaimList, s conversion.Scope) error {
	return autoConvert_v1alpha1_ASClaimList_To_as_ASClaimList(in, out, s)
}

func autoConvert_as_ASClaimList_To_v1alpha1_ASClaimList(in *as.ASClaimList, out *ASClaimList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]ASClaim, len(*in))
		for i := range *in {
			if err := Convert_as_ASClaim_To_v1alpha1_ASClaim(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

// Convert_as_ASClaimList_To_v1alpha1_ASClaimList is an autogenerated conversion function.
func Convert_as_ASClaimList_To_v1alpha1_ASClaimList(in *as.ASClaimList, out *ASClaimList, s conversion.Scope) error {
	return autoConvert_as_ASClaimList_To_v1alpha1_ASClaimList(in, out, s)
}

func autoConvert_v1alpha1_ASClaimSpec_To_as_ASClaimSpec(in *ASClaimSpec, out *as.ASClaimSpec, s conversion.Scope) error {
	out.Index = in.Index
	out.ID = (*uint32)(unsafe.Pointer(in.ID))
	out.Range = (*string)(unsafe.Pointer(in.Range))
	if err := Convert_v1alpha1_ClaimLabels_To_common_ClaimLabels(&in.ClaimLabels, &out.ClaimLabels, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1alpha1_ASClaimSpec_To_as_ASClaimSpec is an autogenerated conversion function.
func Convert_v1alpha1_ASClaimSpec_To_as_ASClaimSpec(in *ASClaimSpec, out *as.ASClaimSpec, s conversion.Scope) error {
	return autoConvert_v1alpha1_ASClaimSpec_To_as_ASClaimSpec(in, out, s)
}

func autoConvert_as_ASClaimSpec_To_v1alpha1_ASClaimSpec(in *as.ASClaimSpec, out *ASClaimSpec, s conversion.Scope) error {
	out.Index = in.Index
	out.ID = (*uint32)(unsafe.Pointer(in.ID))
	out.Range = (*string)(unsafe.Pointer(in.Range))
	if err := Convert_common_ClaimLabels_To_v1alpha1_ClaimLabels(&in.ClaimLabels, &out.ClaimLabels, s); err != nil {
		return err
	}
	return nil
}

// Convert_as_ASClaimSpec_To_v1alpha1_ASClaimSpec is an autogenerated conversion function.
func Convert_as_ASClaimSpec_To_v1alpha1_ASClaimSpec(in *as.ASClaimSpec, out *ASClaimSpec, s conversion.Scope) error {
	return autoConvert_as_ASClaimSpec_To_v1alpha1_ASClaimSpec(in, out, s)
}

func autoConvert_v1alpha1_ASClaimStatus_To_as_ASClaimStatus(in *ASClaimStatus, out *as.ASClaimStatus, s conversion.Scope) error {
	if err := Convert_v1alpha1_ConditionedStatus_To_condition_ConditionedStatus(&in.ConditionedStatus, &out.ConditionedStatus, s); err != nil {
		return err
	}
	out.ID = (*uint32)(unsafe.Pointer(in.ID))
	out.Range = (*string)(unsafe.Pointer(in.Range))
	out.ExpiryTime = (*string)(unsafe.Pointer(in.ExpiryTime))
	return nil
}

// Convert_v1alpha1_ASClaimStatus_To_as_ASClaimStatus is an autogenerated conversion function.
func Convert_v1alpha1_ASClaimStatus_To_as_ASClaimStatus(in *ASClaimStatus, out *as.ASClaimStatus, s conversion.Scope) error {
	return autoConvert_v1alpha1_ASClaimStatus_To_as_ASClaimStatus(in, out, s)
}

func autoConvert_as_ASClaimStatus_To_v1alpha1_ASClaimStatus(in *as.ASClaimStatus, out *ASClaimStatus, s conversion.Scope) error {
	if err := Convert_condition_ConditionedStatus_To_v1alpha1_ConditionedStatus(&in.ConditionedStatus, &out.ConditionedStatus, s); err != nil {
		return err
	}
	out.ID = (*uint32)(unsafe.Pointer(in.ID))
	out.Range = (*string)(unsafe.Pointer(in.Range))
	out.ExpiryTime = (*string)(unsafe.Pointer(in.ExpiryTime))
	return nil
}

// Convert_as_ASClaimStatus_To_v1alpha1_ASClaimStatus is an autogenerated conversion function.
func Convert_as_ASClaimStatus_To_v1alpha1_ASClaimStatus(in *as.ASClaimStatus, out *ASClaimStatus, s conversion.Scope) error {
	return autoConvert_as_ASClaimStatus_To_v1alpha1_ASClaimStatus(in, out, s)
}

func autoConvert_v1alpha1_ASEntry_To_as_ASEntry(in *ASEntry, out *as.ASEntry, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1alpha1_ASEntrySpec_To_as_ASEntrySpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_v1alpha1_ASEntryStatus_To_as_ASEntryStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1alpha1_ASEntry_To_as_ASEntry is an autogenerated conversion function.
func Convert_v1alpha1_ASEntry_To_as_ASEntry(in *ASEntry, out *as.ASEntry, s conversion.Scope) error {
	return autoConvert_v1alpha1_ASEntry_To_as_ASEntry(in, out, s)
}

func autoConvert_as_ASEntry_To_v1alpha1_ASEntry(in *as.ASEntry, out *ASEntry, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_as_ASEntrySpec_To_v1alpha1_ASEntrySpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_as_ASEntryStatus_To_v1alpha1_ASEntryStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

// Convert_as_ASEntry_To_v1alpha1_ASEntry is an autogenerated conversion function.
func Convert_as_ASEntry_To_v1alpha1_ASEntry(in *as.ASEntry, out *ASEntry, s conversion.Scope) error {
	return autoConvert_as_ASEntry_To_v1alpha1_ASEntry(in, out, s)
}

func autoConvert_v1alpha1_ASEntryList_To_as_ASEntryList(in *ASEntryList, out *as.ASEntryList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]as.ASEntry, len(*in))
		for i := range *in {
			if err := Convert_v1alpha1_ASEntry_To_as_ASEntry(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

// Convert_v1alpha1_ASEntryList_To_as_ASEntryList is an autogenerated conversion function.
func Convert_v1alpha1_ASEntryList_To_as_ASEntryList(in *ASEntryList, out *as.ASEntryList, s conversion.Scope) error {
	return autoConvert_v1alpha1_ASEntryList_To_as_ASEntryList(in, out, s)
}

func autoConvert_as_ASEntryList_To_v1alpha1_ASEntryList(in *as.ASEntryList, out *ASEntryList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]ASEntry, len(*in))
		for i := range *in {
			if err := Convert_as_ASEntry_To_v1alpha1_ASEntry(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

// Convert_as_ASEntryList_To_v1alpha1_ASEntryList is an autogenerated conversion function.
func Convert_as_ASEntryList_To_v1alpha1_ASEntryList(in *as.ASEntryList, out *ASEntryList, s conversion.Scope) error {
	return autoConvert_as_ASEntryList_To_v1alpha1_ASEntryList(in, out, s)
}

func autoConvert_v1alpha1_ASEntrySpec_To_as_ASEntrySpec(in *ASEntrySpec, out *as.ASEntrySpec, s conversion.Scope) error {
	out.Index = in.Index
	out.IndexEntry = in.IndexEntry
	out.ClaimType = backend.ClaimType(in.ClaimType)
	out.ID = in.ID
	if err := Convert_v1alpha1_ClaimLabels_To_common_ClaimLabels(&in.ClaimLabels, &out.ClaimLabels, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1alpha1_ASEntrySpec_To_as_ASEntrySpec is an autogenerated conversion function.
func Convert_v1alpha1_ASEntrySpec_To_as_ASEntrySpec(in *ASEntrySpec, out *as.ASEntrySpec, s conversion.Scope) error {
	return autoConvert_v1alpha1_ASEntrySpec_To_as_ASEntrySpec(in, out, s)
}

func autoConvert_as_ASEntrySpec_To_v1alpha1_ASEntrySpec(in *as.ASEntrySpec, out *ASEntrySpec, s conversion.Scope) error {
	out.Index = in.Index
	out.IndexEntry = in.IndexEntry
	out.ClaimType = backend.ClaimType(in.ClaimType)
	out.ID = in.ID
	if err := Convert_common_ClaimLabels_To_v1alpha1_ClaimLabels(&in.ClaimLabels, &out.ClaimLabels, s); err != nil {
		return err
	}
	return nil
}

// Convert_as_ASEntrySpec_To_v1alpha1_ASEntrySpec is an autogenerated conversion function.
func Convert_as_ASEntrySpec_To_v1alpha1_ASEntrySpec(in *as.ASEntrySpec, out *ASEntrySpec, s conversion.Scope) error {
	return autoConvert_as_ASEntrySpec_To_v1alpha1_ASEntrySpec(in, out, s)
}

func autoConvert_v1alpha1_ASEntryStatus_To_as_ASEntryStatus(in *ASEntryStatus, out *as.ASEntryStatus, s conversion.Scope) error {
	if err := Convert_v1alpha1_ConditionedStatus_To_condition_ConditionedStatus(&in.ConditionedStatus, &out.ConditionedStatus, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1alpha1_ASEntryStatus_To_as_ASEntryStatus is an autogenerated conversion function.
func Convert_v1alpha1_ASEntryStatus_To_as_ASEntryStatus(in *ASEntryStatus, out *as.ASEntryStatus, s conversion.Scope) error {
	return autoConvert_v1alpha1_ASEntryStatus_To_as_ASEntryStatus(in, out, s)
}

func autoConvert_as_ASEntryStatus_To_v1alpha1_ASEntryStatus(in *as.ASEntryStatus, out *ASEntryStatus, s conversion.Scope) error {
	if err := Convert_condition_ConditionedStatus_To_v1alpha1_ConditionedStatus(&in.ConditionedStatus, &out.ConditionedStatus, s); err != nil {
		return err
	}
	return nil
}

// Convert_as_ASEntryStatus_To_v1alpha1_ASEntryStatus is an autogenerated conversion function.
func Convert_as_ASEntryStatus_To_v1alpha1_ASEntryStatus(in *as.ASEntryStatus, out *ASEntryStatus, s conversion.Scope) error {
	return autoConvert_as_ASEntryStatus_To_v1alpha1_ASEntryStatus(in, out, s)
}

func autoConvert_v1alpha1_ASIndex_To_as_ASIndex(in *ASIndex, out *as.ASIndex, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1alpha1_ASIndexSpec_To_as_ASIndexSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_v1alpha1_ASIndexStatus_To_as_ASIndexStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1alpha1_ASIndex_To_as_ASIndex is an autogenerated conversion function.
func Convert_v1alpha1_ASIndex_To_as_ASIndex(in *ASIndex, out *as.ASIndex, s conversion.Scope) error {
	return autoConvert_v1alpha1_ASIndex_To_as_ASIndex(in, out, s)
}

func autoConvert_as_ASIndex_To_v1alpha1_ASIndex(in *as.ASIndex, out *ASIndex, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_as_ASIndexSpec_To_v1alpha1_ASIndexSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_as_ASIndexStatus_To_v1alpha1_ASIndexStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

// Convert_as_ASIndex_To_v1alpha1_ASIndex is an autogenerated conversion function.
func Convert_as_ASIndex_To_v1alpha1_ASIndex(in *as.ASIndex, out *ASIndex, s conversion.Scope) error {
	return autoConvert_as_ASIndex_To_v1alpha1_ASIndex(in, out, s)
}

func autoConvert_v1alpha1_ASIndexClaim_To_as_ASIndexClaim(in *ASIndexClaim, out *as.ASIndexClaim, s conversion.Scope) error {
	out.Name = in.Name
	out.ID = (*uint32)(unsafe.Pointer(in.ID))
	out.Range = (*string)(unsafe.Pointer(in.Range))
	if err := Convert_v1alpha1_UserDefinedLabels_To_common_UserDefinedLabels(&in.UserDefinedLabels, &out.UserDefinedLabels, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1alpha1_ASIndexClaim_To_as_ASIndexClaim is an autogenerated conversion function.
func Convert_v1alpha1_ASIndexClaim_To_as_ASIndexClaim(in *ASIndexClaim, out *as.ASIndexClaim, s conversion.Scope) error {
	return autoConvert_v1alpha1_ASIndexClaim_To_as_ASIndexClaim(in, out, s)
}

func autoConvert_as_ASIndexClaim_To_v1alpha1_ASIndexClaim(in *as.ASIndexClaim, out *ASIndexClaim, s conversion.Scope) error {
	out.Name = in.Name
	out.ID = (*uint32)(unsafe.Pointer(in.ID))
	out.Range = (*string)(unsafe.Pointer(in.Range))
	if err := Convert_common_UserDefinedLabels_To_v1alpha1_UserDefinedLabels(&in.UserDefinedLabels, &out.UserDefinedLabels, s); err != nil {
		return err
	}
	return nil
}

// Convert_as_ASIndexClaim_To_v1alpha1_ASIndexClaim is an autogenerated conversion function.
func Convert_as_ASIndexClaim_To_v1alpha1_ASIndexClaim(in *as.ASIndexClaim, out *ASIndexClaim, s conversion.Scope) error {
	return autoConvert_as_ASIndexClaim_To_v1alpha1_ASIndexClaim(in, out, s)
}

func autoConvert_v1alpha1_ASIndexList_To_as_ASIndexList(in *ASIndexList, out *as.ASIndexList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]as.ASIndex, len(*in))
		for i := range *in {
			if err := Convert_v1alpha1_ASIndex_To_as_ASIndex(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

// Convert_v1alpha1_ASIndexList_To_as_ASIndexList is an autogenerated conversion function.
func Convert_v1alpha1_ASIndexList_To_as_ASIndexList(in *ASIndexList, out *as.ASIndexList, s conversion.Scope) error {
	return autoConvert_v1alpha1_ASIndexList_To_as_ASIndexList(in, out, s)
}

func autoConvert_as_ASIndexList_To_v1alpha1_ASIndexList(in *as.ASIndexList, out *ASIndexList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]ASIndex, len(*in))
		for i := range *in {
			if err := Convert_as_ASIndex_To_v1alpha1_ASIndex(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

// Convert_as_ASIndexList_To_v1alpha1_ASIndexList is an autogenerated conversion function.
func Convert_as_ASIndexList_To_v1alpha1_ASIndexList(in *as.ASIndexList, out *ASIndexList, s conversion.Scope) error {
	return autoConvert_as_ASIndexList_To_v1alpha1_ASIndexList(in, out, s)
}

func autoConvert_v1alpha1_ASIndexSpec_To_as_ASIndexSpec(in *ASIndexSpec, out *as.ASIndexSpec, s conversion.Scope) error {
	out.MinID = (*uint32)(unsafe.Pointer(in.MinID))
	out.MaxID = (*uint32)(unsafe.Pointer(in.MaxID))
	if err := Convert_v1alpha1_UserDefinedLabels_To_common_UserDefinedLabels(&in.UserDefinedLabels, &out.UserDefinedLabels, s); err != nil {
		return err
	}
	if in.Claims != nil {
		in, out := &in.Claims, &out.Claims
		*out = make([]as.ASIndexClaim, len(*in))
		for i := range *in {
			if err := Convert_v1alpha1_ASIndexClaim_To_as_ASIndexClaim(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Claims = nil
	}
	return nil
}

// Convert_v1alpha1_ASIndexSpec_To_as_ASIndexSpec is an autogenerated conversion function.
func Convert_v1alpha1_ASIndexSpec_To_as_ASIndexSpec(in *ASIndexSpec, out *as.ASIndexSpec, s conversion.Scope) error {
	return autoConvert_v1alpha1_ASIndexSpec_To_as_ASIndexSpec(in, out, s)
}

func autoConvert_as_ASIndexSpec_To_v1alpha1_ASIndexSpec(in *as.ASIndexSpec, out *ASIndexSpec, s conversion.Scope) error {
	out.MinID = (*uint32)(unsafe.Pointer(in.MinID))
	out.MaxID = (*uint32)(unsafe.Pointer(in.MaxID))
	if err := Convert_common_UserDefinedLabels_To_v1alpha1_UserDefinedLabels(&in.UserDefinedLabels, &out.UserDefinedLabels, s); err != nil {
		return err
	}
	if in.Claims != nil {
		in, out := &in.Claims, &out.Claims
		*out = make([]ASIndexClaim, len(*in))
		for i := range *in {
			if err := Convert_as_ASIndexClaim_To_v1alpha1_ASIndexClaim(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Claims = nil
	}
	return nil
}

// Convert_as_ASIndexSpec_To_v1alpha1_ASIndexSpec is an autogenerated conversion function.
func Convert_as_ASIndexSpec_To_v1alpha1_ASIndexSpec(in *as.ASIndexSpec, out *ASIndexSpec, s conversion.Scope) error {
	return autoConvert_as_ASIndexSpec_To_v1alpha1_ASIndexSpec(in, out, s)
}

func autoConvert_v1alpha1_ASIndexStatus_To_as_ASIndexStatus(in *ASIndexStatus, out *as.ASIndexStatus, s conversion.Scope) error {
	out.MinID = (*uint32)(unsafe.Pointer(in.MinID))
	out.MaxID = (*uint32)(unsafe.Pointer(in.MaxID))
	if err := Convert_v1alpha1_ConditionedStatus_To_condition_ConditionedStatus(&in.ConditionedStatus, &out.ConditionedStatus, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1alpha1_ASIndexStatus_To_as_ASIndexStatus is an autogenerated conversion function.
func Convert_v1alpha1_ASIndexStatus_To_as_ASIndexStatus(in *ASIndexStatus, out *as.ASIndexStatus, s conversion.Scope) error {
	return autoConvert_v1alpha1_ASIndexStatus_To_as_ASIndexStatus(in, out, s)
}

func autoConvert_as_ASIndexStatus_To_v1alpha1_ASIndexStatus(in *as.ASIndexStatus, out *ASIndexStatus, s conversion.Scope) error {
	out.MinID = (*uint32)(unsafe.Pointer(in.MinID))
	out.MaxID = (*uint32)(unsafe.Pointer(in.MaxID))
	if err := Convert_condition_ConditionedStatus_To_v1alpha1_ConditionedStatus(&in.ConditionedStatus, &out.ConditionedStatus, s); err != nil {
		return err
	}
	return nil
}

// Convert_as_ASIndexStatus_To_v1alpha1_ASIndexStatus is an autogenerated conversion function.
func Convert_as_ASIndexStatus_To_v1alpha1_ASIndexStatus(in *as.ASIndexStatus, out *ASIndexStatus, s conversion.Scope) error {
	return autoConvert_as_ASIndexStatus_To_v1alpha1_ASIndexStatus(in, out, s)
}
