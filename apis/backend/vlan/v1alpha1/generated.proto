/*
Copyright 2024 Nokia.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package github.com.kuidio.kuid.apis.backend.vlan.v1alpha1;

import "github.com/kuidio/kuid/apis/common/v1alpha1/generated.proto";
import "github.com/kuidio/kuid/apis/condition/v1alpha1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "github.com/kuidio/kuid/apis/backend/vlan/v1alpha1";

// VLANClaim is the Schema for the VLANClaim API
//
// +k8s:openapi-gen=true
message VLANClaim {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional VLANClaimSpec spec = 2;

  optional VLANClaimStatus status = 3;
}

// VLANClaimList contains a list of VLANClaims
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message VLANClaimList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated VLANClaim items = 2;
}

// VLANClaimSpec defines the desired state of VLANClaim
message VLANClaimSpec {
  // VLANIndex defines the vlan index for the VLAN Claim
  optional string index = 1;

  // VLANID defines the vlan for the VLAN claim
  // +optional
  optional uint32 id = 2;

  // Range defines the vlan range for the VLAN claim
  // The following notation is used: start-end <start-vlanID>-<end-vlanID>
  // the vlans in the range must be consecutive
  // +optional
  optional string range = 3;

  // ClaimLabels define the user defined labels and selector labels used
  // in resource claim
  optional github.com.kuidio.kuid.apis.common.v1alpha1.ClaimLabels claimLabels = 4;

  // Owner defines the ownerReference of the VLANClaim
  // Allow for different namesapces, hence it is part of the spec
  optional github.com.kuidio.kuid.apis.common.v1alpha1.OwnerReference owner = 5;
}

// VLANClaimStatus defines the observed state of VLANClaim
message VLANClaimStatus {
  // ConditionedStatus provides the status of the IPClain using conditions
  // - a ready condition indicates the overall status of the resource
  optional github.com.kuidio.kuid.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1;

  // VLANID defines the vlan for the VLAN claim
  // +optional
  optional uint32 id = 2;

  // VLANRange defines the vlan range for the VLAN claim
  // +optional
  optional string range = 3;

  // ExpiryTime defines when the claim expires
  // +kubebuilder:validation:Optional
  // +optional
  optional string expiryTime = 4;
}

// VLANEntry is the Schema for the vlanentry API
//
// +k8s:openapi-gen=true
message VLANEntry {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional VLANEntrySpec spec = 2;

  optional VLANEntryStatus status = 3;
}

// VLANEntryList contains a list of VLANEntries
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message VLANEntryList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated VLANEntry items = 2;
}

// VLANEntrySpec defines the desired state of VLANEntry
message VLANEntrySpec {
  // VLANIndex defines the vlan index for the VLAN Claim
  optional string index = 1;

  // ClaimType defines the claimType of the VLAN Entry
  optional string claimType = 2;

  // ID defines the id of the VLAN entry in the tree
  optional string id = 3;

  // ClaimLabels define the user defined labels and selector labels used
  // in resource claim
  optional github.com.kuidio.kuid.apis.common.v1alpha1.ClaimLabels claimLabels = 4;

  // Claim defines the name of the claim that is the origin of this  entry
  optional string claim = 5;

  // Owner defines the ownerReference of the VLANClaim
  // Allow for different namesapces, hence it is part of the spec
  optional github.com.kuidio.kuid.apis.common.v1alpha1.OwnerReference owner = 6;
}

// VLANEntryStatus defines the observed state of VLANEntry
message VLANEntryStatus {
  // ConditionedStatus provides the status of the VLANEntry using conditions
  // - a ready condition indicates the overall status of the resource
  optional github.com.kuidio.kuid.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1;
}

// VLANIndex is the Schema for the VLANIndex API
//
// +k8s:openapi-gen=true
message VLANIndex {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional VLANIndexSpec spec = 2;

  optional VLANIndexStatus status = 3;
}

// VLANIndexList contains a list of VLANIndexs
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message VLANIndexList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated VLANIndex items = 2;
}

// VLANIndexSpec defines the desired state of VLANIndex
message VLANIndexSpec {
  // MinID defines the min VLAN ID the index supports
  // +optional
  optional uint32 minID = 1;

  // MaxID defines the max VLAN ID the index supports
  // +optional
  optional uint32 maxID = 2;

  // UserDefinedLabels define metadata to the resource.
  // defined in the spec to distingiush metadata labels from user defined labels
  optional github.com.kuidio.kuid.apis.common.v1alpha1.UserDefinedLabels userDefinedLabels = 3;
}

// VLANIndexStatus defines the observed state of VLANIndex
message VLANIndexStatus {
  // ConditionedStatus provides the status of the VLANIndex using conditions
  // - a ready condition indicates the overall status of the resource
  optional github.com.kuidio.kuid.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1;
}

