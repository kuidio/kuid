/*
Copyright 2024 Nokia.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package github.com.kuidio.kuid.apis.backend.vlan.v1alpha1;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/kuidio/kuid/apis/backend/as/v1alpha1/generated.proto";
import "github.com/kuidio/kuid/apis/common/v1alpha1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option (gogoproto.marshaler_all) = true;
option (gogoproto.stable_marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.stringer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_enum_prefix_all) = false;
option (gogoproto.goproto_getters_all) = false;
option go_package = "github.com/kuidio/kuid/apis/backend/vlan/v1alpha1";

message Condition {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.Condition condition = 1 [(gogoproto.customname) = "Condition", (gogoproto.nullable) = false];
}

message ConditionedStatus {
  // Conditions of the resource.
  // +optional
  // +listType:=map
  // +listMapKey:=type
  repeated .github.com.kuidio.kuid.apis.backend.as.v1alpha1.Condition conditions = 1 [(gogoproto.customname) = "Conditions", (gogoproto.nullable) = false];
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:resource:categories={kuid}
// VLANClaim is the Schema for the VLANClaim API
message VLANClaim {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1 [(gogoproto.customname) = "ObjectMeta", (gogoproto.nullable) = false];

  optional VLANClaimSpec spec = 2 [(gogoproto.customname) = "Spec", (gogoproto.nullable) = false];

  optional VLANClaimStatus status = 3 [(gogoproto.customname) = "Status", (gogoproto.nullable) = false];
}

// VLANClaimList contains a list of VLANClaims
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message VLANClaimList {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1 [(gogoproto.customname) = "ListMeta", (gogoproto.nullable) = false];

  repeated VLANClaim items = 2 [(gogoproto.customname) = "Items", (gogoproto.nullable) = false];
}

// VLANClaimSpec defines the desired state of VLANClaim
message VLANClaimSpec {
  // Index defines the index for the resource
  optional string index = 1 [(gogoproto.customname) = "Index", (gogoproto.nullable) = false];

  // ID defines the id of the resource
  optional uint32 id = 2 [(gogoproto.customname) = "ID"];

  // Range defines the VLAN range of the resource
  // The following notation is used: start-end <start-VLANID>-<end-VLANID>
  // the VLANs in the range must be consecutive
  optional string range = 3 [(gogoproto.customname) = "Range"];

  // ClaimLabels define the user defined labels and selector labels used
  // in resource claim
  optional .github.com.kuidio.kuid.apis.common.v1alpha1.ClaimLabels claimLabels = 4 [(gogoproto.customname) = "ClaimLabels", (gogoproto.nullable) = false];
}

// VLANClaimStatus defines the observed state of VLANClaim
message VLANClaimStatus {
  // ConditionedStatus provides the status of the VLANClain using conditions
  // - a ready condition indicates the overall status of the resource
  optional .github.com.kuidio.kuid.apis.backend.as.v1alpha1.ConditionedStatus conditionedStatus = 1 [(gogoproto.customname) = "ConditionedStatus", (gogoproto.nullable) = false];

  // VLANID defines the VLAN for the VLAN claim
  // +optional
  optional uint32 id = 2 [(gogoproto.customname) = "ID"];

  // VLANRange defines the VLAN range for the VLAN claim
  // +optional
  optional string range = 3 [(gogoproto.customname) = "Range"];

  // ExpiryTime defines when the claim expires
  // +kubebuilder:validation:Optional
  // +optional
  optional string expiryTime = 4 [(gogoproto.customname) = "ExpiryTime"];
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:resource:categories={kuid}
// VLANEntry is the Schema for the VLANentry API
message VLANEntry {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1 [(gogoproto.customname) = "ObjectMeta", (gogoproto.nullable) = false];

  optional VLANEntrySpec spec = 2 [(gogoproto.customname) = "Spec", (gogoproto.nullable) = false];

  optional VLANEntryStatus status = 3 [(gogoproto.customname) = "Status", (gogoproto.nullable) = false];
}

// VLANEntryList contains a list of VLANEntries
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message VLANEntryList {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1 [(gogoproto.customname) = "ListMeta", (gogoproto.nullable) = false];

  repeated VLANEntry items = 2 [(gogoproto.customname) = "Items", (gogoproto.nullable) = false];
}

// VLANEntrySpec defines the desired state of VLANEntry
message VLANEntrySpec {
  // Index defines the index for the resource
  optional string index = 1 [(gogoproto.customname) = "Index", (gogoproto.nullable) = false];

  // IndexEntry identifies if the entry is originated from an IP Index
  optional bool indexEntry = 2 [(gogoproto.customname) = "IndexEntry", (gogoproto.nullable) = false];

  // ClaimType defines the claimType of the resource
  optional string claimType = 3 [(gogoproto.casttype) = "github.com/kuidio/kuid/apis/backend.ClaimType", (gogoproto.customname) = "ClaimType", (gogoproto.nullable) = false];

  // ID defines the id of the resource in the tree
  optional string id = 4 [(gogoproto.customname) = "ID", (gogoproto.nullable) = false];

  // ClaimLabels define the user defined labels and selector labels used
  // in resource claim
  optional .github.com.kuidio.kuid.apis.common.v1alpha1.ClaimLabels claimLabels = 5 [(gogoproto.customname) = "ClaimLabels", (gogoproto.nullable) = false];
}

// VLANEntryStatus defines the observed state of VLANEntry
message VLANEntryStatus {
  // ConditionedStatus provides the status of the VLANEntry using conditions
  // - a ready condition indicates the overall status of the resource
  optional .github.com.kuidio.kuid.apis.backend.as.v1alpha1.ConditionedStatus conditionedStatus = 1 [(gogoproto.customname) = "ConditionedStatus", (gogoproto.nullable) = false];
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:resource:categories={kuid}
// VLANIndex is the Schema for the VLANIndex API
message VLANIndex {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1 [(gogoproto.customname) = "ObjectMeta", (gogoproto.nullable) = false];

  optional VLANIndexSpec spec = 2 [(gogoproto.customname) = "Spec", (gogoproto.nullable) = false];

  optional VLANIndexStatus status = 3 [(gogoproto.customname) = "Status", (gogoproto.nullable) = false];
}

// VLANIndexList contains a list of VLANIndexs
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message VLANIndexList {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1 [(gogoproto.customname) = "ListMeta", (gogoproto.nullable) = false];

  repeated VLANIndex items = 2 [(gogoproto.customname) = "Items", (gogoproto.nullable) = false];
}

// VLANIndexSpec defines the desired state of VLANIndex
message VLANIndexSpec {
  // MinID defines the min VLAN ID the index supports
  // +optional
  optional uint32 minID = 1 [(gogoproto.customname) = "MinID"];

  // MaxID defines the max VLAN ID the index supports
  // +optional
  optional uint32 maxID = 2 [(gogoproto.customname) = "MaxID"];

  // UserDefinedLabels define metadata to the resource.
  // defined in the spec to distingiush metadata labels from user defined labels
  optional .github.com.kuidio.kuid.apis.common.v1alpha1.UserDefinedLabels userDefinedLabels = 3 [(gogoproto.customname) = "UserDefinedLabels", (gogoproto.nullable) = false];
}

// VLANIndexStatus defines the observed state of VLANIndex
message VLANIndexStatus {
  // MinID defines the min VLAN ID the index supports
  // +optional
  optional uint32 minID = 1 [(gogoproto.customname) = "MinID"];

  // MaxID defines the max VLAN ID the index supports
  // +optional
  optional uint32 maxID = 2 [(gogoproto.customname) = "MaxID"];

  // ConditionedStatus provides the status of the VLANIndex using conditions
  // - a ready condition indicates the overall status of the resource
  optional .github.com.kuidio.kuid.apis.backend.as.v1alpha1.ConditionedStatus conditionedStatus = 3 [(gogoproto.customname) = "ConditionedStatus", (gogoproto.nullable) = false];
}

