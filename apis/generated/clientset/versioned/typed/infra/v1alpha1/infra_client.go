/*
Copyright 2024 Nokia.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"net/http"

	v1alpha1 "github.com/kuidio/kuid/apis/backend/infra/v1alpha1"
	"github.com/kuidio/kuid/apis/generated/clientset/versioned/scheme"
	rest "k8s.io/client-go/rest"
)

type InfraV1alpha1Interface interface {
	RESTClient() rest.Interface
	ClustersGetter
	EndpointsGetter
	EndpointSetsGetter
	LinksGetter
	LinkSetsGetter
	ModulesGetter
	ModuleBaysGetter
	NodesGetter
	NodeGroupsGetter
	NodeItemsGetter
	NodeSetsGetter
	RacksGetter
	RegionsGetter
	SitesGetter
}

// InfraV1alpha1Client is used to interact with features provided by the infra.be.kuid.dev group.
type InfraV1alpha1Client struct {
	restClient rest.Interface
}

func (c *InfraV1alpha1Client) Clusters(namespace string) ClusterInterface {
	return newClusters(c, namespace)
}

func (c *InfraV1alpha1Client) Endpoints(namespace string) EndpointInterface {
	return newEndpoints(c, namespace)
}

func (c *InfraV1alpha1Client) EndpointSets(namespace string) EndpointSetInterface {
	return newEndpointSets(c, namespace)
}

func (c *InfraV1alpha1Client) Links(namespace string) LinkInterface {
	return newLinks(c, namespace)
}

func (c *InfraV1alpha1Client) LinkSets(namespace string) LinkSetInterface {
	return newLinkSets(c, namespace)
}

func (c *InfraV1alpha1Client) Modules(namespace string) ModuleInterface {
	return newModules(c, namespace)
}

func (c *InfraV1alpha1Client) ModuleBays(namespace string) ModuleBayInterface {
	return newModuleBays(c, namespace)
}

func (c *InfraV1alpha1Client) Nodes(namespace string) NodeInterface {
	return newNodes(c, namespace)
}

func (c *InfraV1alpha1Client) NodeGroups(namespace string) NodeGroupInterface {
	return newNodeGroups(c, namespace)
}

func (c *InfraV1alpha1Client) NodeItems(namespace string) NodeItemInterface {
	return newNodeItems(c, namespace)
}

func (c *InfraV1alpha1Client) NodeSets(namespace string) NodeSetInterface {
	return newNodeSets(c, namespace)
}

func (c *InfraV1alpha1Client) Racks(namespace string) RackInterface {
	return newRacks(c, namespace)
}

func (c *InfraV1alpha1Client) Regions(namespace string) RegionInterface {
	return newRegions(c, namespace)
}

func (c *InfraV1alpha1Client) Sites(namespace string) SiteInterface {
	return newSites(c, namespace)
}

// NewForConfig creates a new InfraV1alpha1Client for the given config.
// NewForConfig is equivalent to NewForConfigAndClient(c, httpClient),
// where httpClient was generated with rest.HTTPClientFor(c).
func NewForConfig(c *rest.Config) (*InfraV1alpha1Client, error) {
	config := *c
	if err := setConfigDefaults(&config); err != nil {
		return nil, err
	}
	httpClient, err := rest.HTTPClientFor(&config)
	if err != nil {
		return nil, err
	}
	return NewForConfigAndClient(&config, httpClient)
}

// NewForConfigAndClient creates a new InfraV1alpha1Client for the given config and http client.
// Note the http client provided takes precedence over the configured transport values.
func NewForConfigAndClient(c *rest.Config, h *http.Client) (*InfraV1alpha1Client, error) {
	config := *c
	if err := setConfigDefaults(&config); err != nil {
		return nil, err
	}
	client, err := rest.RESTClientForConfigAndClient(&config, h)
	if err != nil {
		return nil, err
	}
	return &InfraV1alpha1Client{client}, nil
}

// NewForConfigOrDie creates a new InfraV1alpha1Client for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *InfraV1alpha1Client {
	client, err := NewForConfig(c)
	if err != nil {
		panic(err)
	}
	return client
}

// New creates a new InfraV1alpha1Client for the given RESTClient.
func New(c rest.Interface) *InfraV1alpha1Client {
	return &InfraV1alpha1Client{c}
}

func setConfigDefaults(config *rest.Config) error {
	gv := v1alpha1.SchemeGroupVersion
	config.GroupVersion = &gv
	config.APIPath = "/apis"
	config.NegotiatedSerializer = scheme.Codecs.WithoutConversion()

	if config.UserAgent == "" {
		config.UserAgent = rest.DefaultKubernetesUserAgent()
	}

	return nil
}

// RESTClient returns a RESTClient that is used to communicate
// with API server by this client implementation.
func (c *InfraV1alpha1Client) RESTClient() rest.Interface {
	if c == nil {
		return nil
	}
	return c.restClient
}
