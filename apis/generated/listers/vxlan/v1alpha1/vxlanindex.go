/*
Copyright 2024 Nokia.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kuidio/kuid/apis/backend/vxlan/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VXLANIndexLister helps list VXLANIndexes.
// All objects returned here must be treated as read-only.
type VXLANIndexLister interface {
	// List lists all VXLANIndexes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VXLANIndex, err error)
	// VXLANIndexes returns an object that can list and get VXLANIndexes.
	VXLANIndexes(namespace string) VXLANIndexNamespaceLister
	VXLANIndexListerExpansion
}

// vXLANIndexLister implements the VXLANIndexLister interface.
type vXLANIndexLister struct {
	indexer cache.Indexer
}

// NewVXLANIndexLister returns a new VXLANIndexLister.
func NewVXLANIndexLister(indexer cache.Indexer) VXLANIndexLister {
	return &vXLANIndexLister{indexer: indexer}
}

// List lists all VXLANIndexes in the indexer.
func (s *vXLANIndexLister) List(selector labels.Selector) (ret []*v1alpha1.VXLANIndex, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VXLANIndex))
	})
	return ret, err
}

// VXLANIndexes returns an object that can list and get VXLANIndexes.
func (s *vXLANIndexLister) VXLANIndexes(namespace string) VXLANIndexNamespaceLister {
	return vXLANIndexNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VXLANIndexNamespaceLister helps list and get VXLANIndexes.
// All objects returned here must be treated as read-only.
type VXLANIndexNamespaceLister interface {
	// List lists all VXLANIndexes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VXLANIndex, err error)
	// Get retrieves the VXLANIndex from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.VXLANIndex, error)
	VXLANIndexNamespaceListerExpansion
}

// vXLANIndexNamespaceLister implements the VXLANIndexNamespaceLister
// interface.
type vXLANIndexNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VXLANIndexes in the indexer for a given namespace.
func (s vXLANIndexNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VXLANIndex, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VXLANIndex))
	})
	return ret, err
}

// Get retrieves the VXLANIndex from the indexer for a given namespace and name.
func (s vXLANIndexNamespaceLister) Get(name string) (*v1alpha1.VXLANIndex, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("vxlanindex"), name)
	}
	return obj.(*v1alpha1.VXLANIndex), nil
}
