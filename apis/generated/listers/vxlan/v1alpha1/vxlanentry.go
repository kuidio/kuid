/*
Copyright 2024 Nokia.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kuidio/kuid/apis/backend/vxlan/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VXLANEntryLister helps list VXLANEntries.
// All objects returned here must be treated as read-only.
type VXLANEntryLister interface {
	// List lists all VXLANEntries in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VXLANEntry, err error)
	// VXLANEntries returns an object that can list and get VXLANEntries.
	VXLANEntries(namespace string) VXLANEntryNamespaceLister
	VXLANEntryListerExpansion
}

// vXLANEntryLister implements the VXLANEntryLister interface.
type vXLANEntryLister struct {
	indexer cache.Indexer
}

// NewVXLANEntryLister returns a new VXLANEntryLister.
func NewVXLANEntryLister(indexer cache.Indexer) VXLANEntryLister {
	return &vXLANEntryLister{indexer: indexer}
}

// List lists all VXLANEntries in the indexer.
func (s *vXLANEntryLister) List(selector labels.Selector) (ret []*v1alpha1.VXLANEntry, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VXLANEntry))
	})
	return ret, err
}

// VXLANEntries returns an object that can list and get VXLANEntries.
func (s *vXLANEntryLister) VXLANEntries(namespace string) VXLANEntryNamespaceLister {
	return vXLANEntryNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VXLANEntryNamespaceLister helps list and get VXLANEntries.
// All objects returned here must be treated as read-only.
type VXLANEntryNamespaceLister interface {
	// List lists all VXLANEntries in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VXLANEntry, err error)
	// Get retrieves the VXLANEntry from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.VXLANEntry, error)
	VXLANEntryNamespaceListerExpansion
}

// vXLANEntryNamespaceLister implements the VXLANEntryNamespaceLister
// interface.
type vXLANEntryNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VXLANEntries in the indexer for a given namespace.
func (s vXLANEntryNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VXLANEntry, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VXLANEntry))
	})
	return ret, err
}

// Get retrieves the VXLANEntry from the indexer for a given namespace and name.
func (s vXLANEntryNamespaceLister) Get(name string) (*v1alpha1.VXLANEntry, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("vxlanentry"), name)
	}
	return obj.(*v1alpha1.VXLANEntry), nil
}
