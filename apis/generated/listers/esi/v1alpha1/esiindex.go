/*
Copyright 2024 Nokia.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kuidio/kuid/apis/backend/esi/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ESIIndexLister helps list ESIIndexes.
// All objects returned here must be treated as read-only.
type ESIIndexLister interface {
	// List lists all ESIIndexes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ESIIndex, err error)
	// ESIIndexes returns an object that can list and get ESIIndexes.
	ESIIndexes(namespace string) ESIIndexNamespaceLister
	ESIIndexListerExpansion
}

// eSIIndexLister implements the ESIIndexLister interface.
type eSIIndexLister struct {
	indexer cache.Indexer
}

// NewESIIndexLister returns a new ESIIndexLister.
func NewESIIndexLister(indexer cache.Indexer) ESIIndexLister {
	return &eSIIndexLister{indexer: indexer}
}

// List lists all ESIIndexes in the indexer.
func (s *eSIIndexLister) List(selector labels.Selector) (ret []*v1alpha1.ESIIndex, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ESIIndex))
	})
	return ret, err
}

// ESIIndexes returns an object that can list and get ESIIndexes.
func (s *eSIIndexLister) ESIIndexes(namespace string) ESIIndexNamespaceLister {
	return eSIIndexNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ESIIndexNamespaceLister helps list and get ESIIndexes.
// All objects returned here must be treated as read-only.
type ESIIndexNamespaceLister interface {
	// List lists all ESIIndexes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ESIIndex, err error)
	// Get retrieves the ESIIndex from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ESIIndex, error)
	ESIIndexNamespaceListerExpansion
}

// eSIIndexNamespaceLister implements the ESIIndexNamespaceLister
// interface.
type eSIIndexNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ESIIndexes in the indexer for a given namespace.
func (s eSIIndexNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ESIIndex, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ESIIndex))
	})
	return ret, err
}

// Get retrieves the ESIIndex from the indexer for a given namespace and name.
func (s eSIIndexNamespaceLister) Get(name string) (*v1alpha1.ESIIndex, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("esiindex"), name)
	}
	return obj.(*v1alpha1.ESIIndex), nil
}
