/*
Copyright 2024 Nokia.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kuidio/kuid/apis/backend/esi/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ESIClaimLister helps list ESIClaims.
// All objects returned here must be treated as read-only.
type ESIClaimLister interface {
	// List lists all ESIClaims in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ESIClaim, err error)
	// ESIClaims returns an object that can list and get ESIClaims.
	ESIClaims(namespace string) ESIClaimNamespaceLister
	ESIClaimListerExpansion
}

// eSIClaimLister implements the ESIClaimLister interface.
type eSIClaimLister struct {
	indexer cache.Indexer
}

// NewESIClaimLister returns a new ESIClaimLister.
func NewESIClaimLister(indexer cache.Indexer) ESIClaimLister {
	return &eSIClaimLister{indexer: indexer}
}

// List lists all ESIClaims in the indexer.
func (s *eSIClaimLister) List(selector labels.Selector) (ret []*v1alpha1.ESIClaim, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ESIClaim))
	})
	return ret, err
}

// ESIClaims returns an object that can list and get ESIClaims.
func (s *eSIClaimLister) ESIClaims(namespace string) ESIClaimNamespaceLister {
	return eSIClaimNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ESIClaimNamespaceLister helps list and get ESIClaims.
// All objects returned here must be treated as read-only.
type ESIClaimNamespaceLister interface {
	// List lists all ESIClaims in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ESIClaim, err error)
	// Get retrieves the ESIClaim from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ESIClaim, error)
	ESIClaimNamespaceListerExpansion
}

// eSIClaimNamespaceLister implements the ESIClaimNamespaceLister
// interface.
type eSIClaimNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ESIClaims in the indexer for a given namespace.
func (s eSIClaimNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ESIClaim, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ESIClaim))
	})
	return ret, err
}

// Get retrieves the ESIClaim from the indexer for a given namespace and name.
func (s eSIClaimNamespaceLister) Get(name string) (*v1alpha1.ESIClaim, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("esiclaim"), name)
	}
	return obj.(*v1alpha1.ESIClaim), nil
}
