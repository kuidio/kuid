/*
Copyright 2024 Nokia.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kuidio/kuid/apis/backend/infra/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EndpointSetLister helps list EndpointSets.
// All objects returned here must be treated as read-only.
type EndpointSetLister interface {
	// List lists all EndpointSets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EndpointSet, err error)
	// EndpointSets returns an object that can list and get EndpointSets.
	EndpointSets(namespace string) EndpointSetNamespaceLister
	EndpointSetListerExpansion
}

// endpointSetLister implements the EndpointSetLister interface.
type endpointSetLister struct {
	indexer cache.Indexer
}

// NewEndpointSetLister returns a new EndpointSetLister.
func NewEndpointSetLister(indexer cache.Indexer) EndpointSetLister {
	return &endpointSetLister{indexer: indexer}
}

// List lists all EndpointSets in the indexer.
func (s *endpointSetLister) List(selector labels.Selector) (ret []*v1alpha1.EndpointSet, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EndpointSet))
	})
	return ret, err
}

// EndpointSets returns an object that can list and get EndpointSets.
func (s *endpointSetLister) EndpointSets(namespace string) EndpointSetNamespaceLister {
	return endpointSetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EndpointSetNamespaceLister helps list and get EndpointSets.
// All objects returned here must be treated as read-only.
type EndpointSetNamespaceLister interface {
	// List lists all EndpointSets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EndpointSet, err error)
	// Get retrieves the EndpointSet from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.EndpointSet, error)
	EndpointSetNamespaceListerExpansion
}

// endpointSetNamespaceLister implements the EndpointSetNamespaceLister
// interface.
type endpointSetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EndpointSets in the indexer for a given namespace.
func (s endpointSetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.EndpointSet, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EndpointSet))
	})
	return ret, err
}

// Get retrieves the EndpointSet from the indexer for a given namespace and name.
func (s endpointSetNamespaceLister) Get(name string) (*v1alpha1.EndpointSet, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("endpointset"), name)
	}
	return obj.(*v1alpha1.EndpointSet), nil
}
