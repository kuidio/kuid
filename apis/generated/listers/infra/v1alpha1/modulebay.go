/*
Copyright 2024 Nokia.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kuidio/kuid/apis/backend/infra/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ModuleBayLister helps list ModuleBays.
// All objects returned here must be treated as read-only.
type ModuleBayLister interface {
	// List lists all ModuleBays in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ModuleBay, err error)
	// ModuleBays returns an object that can list and get ModuleBays.
	ModuleBays(namespace string) ModuleBayNamespaceLister
	ModuleBayListerExpansion
}

// moduleBayLister implements the ModuleBayLister interface.
type moduleBayLister struct {
	indexer cache.Indexer
}

// NewModuleBayLister returns a new ModuleBayLister.
func NewModuleBayLister(indexer cache.Indexer) ModuleBayLister {
	return &moduleBayLister{indexer: indexer}
}

// List lists all ModuleBays in the indexer.
func (s *moduleBayLister) List(selector labels.Selector) (ret []*v1alpha1.ModuleBay, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ModuleBay))
	})
	return ret, err
}

// ModuleBays returns an object that can list and get ModuleBays.
func (s *moduleBayLister) ModuleBays(namespace string) ModuleBayNamespaceLister {
	return moduleBayNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ModuleBayNamespaceLister helps list and get ModuleBays.
// All objects returned here must be treated as read-only.
type ModuleBayNamespaceLister interface {
	// List lists all ModuleBays in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ModuleBay, err error)
	// Get retrieves the ModuleBay from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ModuleBay, error)
	ModuleBayNamespaceListerExpansion
}

// moduleBayNamespaceLister implements the ModuleBayNamespaceLister
// interface.
type moduleBayNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ModuleBays in the indexer for a given namespace.
func (s moduleBayNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ModuleBay, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ModuleBay))
	})
	return ret, err
}

// Get retrieves the ModuleBay from the indexer for a given namespace and name.
func (s moduleBayNamespaceLister) Get(name string) (*v1alpha1.ModuleBay, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("modulebay"), name)
	}
	return obj.(*v1alpha1.ModuleBay), nil
}
