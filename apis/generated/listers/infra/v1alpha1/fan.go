/*
Copyright 2024 Nokia.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kuidio/kuid/apis/backend/infra/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FanLister helps list Fans.
// All objects returned here must be treated as read-only.
type FanLister interface {
	// List lists all Fans in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Fan, err error)
	// Fans returns an object that can list and get Fans.
	Fans(namespace string) FanNamespaceLister
	FanListerExpansion
}

// fanLister implements the FanLister interface.
type fanLister struct {
	indexer cache.Indexer
}

// NewFanLister returns a new FanLister.
func NewFanLister(indexer cache.Indexer) FanLister {
	return &fanLister{indexer: indexer}
}

// List lists all Fans in the indexer.
func (s *fanLister) List(selector labels.Selector) (ret []*v1alpha1.Fan, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Fan))
	})
	return ret, err
}

// Fans returns an object that can list and get Fans.
func (s *fanLister) Fans(namespace string) FanNamespaceLister {
	return fanNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FanNamespaceLister helps list and get Fans.
// All objects returned here must be treated as read-only.
type FanNamespaceLister interface {
	// List lists all Fans in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Fan, err error)
	// Get retrieves the Fan from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Fan, error)
	FanNamespaceListerExpansion
}

// fanNamespaceLister implements the FanNamespaceLister
// interface.
type fanNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Fans in the indexer for a given namespace.
func (s fanNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Fan, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Fan))
	})
	return ret, err
}

// Get retrieves the Fan from the indexer for a given namespace and name.
func (s fanNamespaceLister) Get(name string) (*v1alpha1.Fan, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("fan"), name)
	}
	return obj.(*v1alpha1.Fan), nil
}
