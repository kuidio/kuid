/*
Copyright 2024 Nokia.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kuidio/kuid/apis/backend/ipam/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IPIndexLister helps list IPIndexes.
// All objects returned here must be treated as read-only.
type IPIndexLister interface {
	// List lists all IPIndexes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IPIndex, err error)
	// IPIndexes returns an object that can list and get IPIndexes.
	IPIndexes(namespace string) IPIndexNamespaceLister
	IPIndexListerExpansion
}

// iPIndexLister implements the IPIndexLister interface.
type iPIndexLister struct {
	indexer cache.Indexer
}

// NewIPIndexLister returns a new IPIndexLister.
func NewIPIndexLister(indexer cache.Indexer) IPIndexLister {
	return &iPIndexLister{indexer: indexer}
}

// List lists all IPIndexes in the indexer.
func (s *iPIndexLister) List(selector labels.Selector) (ret []*v1alpha1.IPIndex, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IPIndex))
	})
	return ret, err
}

// IPIndexes returns an object that can list and get IPIndexes.
func (s *iPIndexLister) IPIndexes(namespace string) IPIndexNamespaceLister {
	return iPIndexNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IPIndexNamespaceLister helps list and get IPIndexes.
// All objects returned here must be treated as read-only.
type IPIndexNamespaceLister interface {
	// List lists all IPIndexes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IPIndex, err error)
	// Get retrieves the IPIndex from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.IPIndex, error)
	IPIndexNamespaceListerExpansion
}

// iPIndexNamespaceLister implements the IPIndexNamespaceLister
// interface.
type iPIndexNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IPIndexes in the indexer for a given namespace.
func (s iPIndexNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IPIndex, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IPIndex))
	})
	return ret, err
}

// Get retrieves the IPIndex from the indexer for a given namespace and name.
func (s iPIndexNamespaceLister) Get(name string) (*v1alpha1.IPIndex, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ipindex"), name)
	}
	return obj.(*v1alpha1.IPIndex), nil
}
