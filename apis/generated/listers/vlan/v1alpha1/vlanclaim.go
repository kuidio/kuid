/*
Copyright 2024 Nokia.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kuidio/kuid/apis/backend/vlan/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VLANClaimLister helps list VLANClaims.
// All objects returned here must be treated as read-only.
type VLANClaimLister interface {
	// List lists all VLANClaims in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VLANClaim, err error)
	// VLANClaims returns an object that can list and get VLANClaims.
	VLANClaims(namespace string) VLANClaimNamespaceLister
	VLANClaimListerExpansion
}

// vLANClaimLister implements the VLANClaimLister interface.
type vLANClaimLister struct {
	indexer cache.Indexer
}

// NewVLANClaimLister returns a new VLANClaimLister.
func NewVLANClaimLister(indexer cache.Indexer) VLANClaimLister {
	return &vLANClaimLister{indexer: indexer}
}

// List lists all VLANClaims in the indexer.
func (s *vLANClaimLister) List(selector labels.Selector) (ret []*v1alpha1.VLANClaim, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VLANClaim))
	})
	return ret, err
}

// VLANClaims returns an object that can list and get VLANClaims.
func (s *vLANClaimLister) VLANClaims(namespace string) VLANClaimNamespaceLister {
	return vLANClaimNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VLANClaimNamespaceLister helps list and get VLANClaims.
// All objects returned here must be treated as read-only.
type VLANClaimNamespaceLister interface {
	// List lists all VLANClaims in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VLANClaim, err error)
	// Get retrieves the VLANClaim from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.VLANClaim, error)
	VLANClaimNamespaceListerExpansion
}

// vLANClaimNamespaceLister implements the VLANClaimNamespaceLister
// interface.
type vLANClaimNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VLANClaims in the indexer for a given namespace.
func (s vLANClaimNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VLANClaim, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VLANClaim))
	})
	return ret, err
}

// Get retrieves the VLANClaim from the indexer for a given namespace and name.
func (s vLANClaimNamespaceLister) Get(name string) (*v1alpha1.VLANClaim, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("vlanclaim"), name)
	}
	return obj.(*v1alpha1.VLANClaim), nil
}
