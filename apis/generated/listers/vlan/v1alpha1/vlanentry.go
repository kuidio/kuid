/*
Copyright 2024 Nokia.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kuidio/kuid/apis/backend/vlan/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VLANEntryLister helps list VLANEntries.
// All objects returned here must be treated as read-only.
type VLANEntryLister interface {
	// List lists all VLANEntries in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VLANEntry, err error)
	// VLANEntries returns an object that can list and get VLANEntries.
	VLANEntries(namespace string) VLANEntryNamespaceLister
	VLANEntryListerExpansion
}

// vLANEntryLister implements the VLANEntryLister interface.
type vLANEntryLister struct {
	indexer cache.Indexer
}

// NewVLANEntryLister returns a new VLANEntryLister.
func NewVLANEntryLister(indexer cache.Indexer) VLANEntryLister {
	return &vLANEntryLister{indexer: indexer}
}

// List lists all VLANEntries in the indexer.
func (s *vLANEntryLister) List(selector labels.Selector) (ret []*v1alpha1.VLANEntry, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VLANEntry))
	})
	return ret, err
}

// VLANEntries returns an object that can list and get VLANEntries.
func (s *vLANEntryLister) VLANEntries(namespace string) VLANEntryNamespaceLister {
	return vLANEntryNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VLANEntryNamespaceLister helps list and get VLANEntries.
// All objects returned here must be treated as read-only.
type VLANEntryNamespaceLister interface {
	// List lists all VLANEntries in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VLANEntry, err error)
	// Get retrieves the VLANEntry from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.VLANEntry, error)
	VLANEntryNamespaceListerExpansion
}

// vLANEntryNamespaceLister implements the VLANEntryNamespaceLister
// interface.
type vLANEntryNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VLANEntries in the indexer for a given namespace.
func (s vLANEntryNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VLANEntry, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VLANEntry))
	})
	return ret, err
}

// Get retrieves the VLANEntry from the indexer for a given namespace and name.
func (s vLANEntryNamespaceLister) Get(name string) (*v1alpha1.VLANEntry, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("vlanentry"), name)
	}
	return obj.(*v1alpha1.VLANEntry), nil
}
