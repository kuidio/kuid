/*
Copyright 2024 Nokia.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kuidio/kuid/apis/backend/as/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ASIndexLister helps list ASIndexes.
// All objects returned here must be treated as read-only.
type ASIndexLister interface {
	// List lists all ASIndexes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ASIndex, err error)
	// ASIndexes returns an object that can list and get ASIndexes.
	ASIndexes(namespace string) ASIndexNamespaceLister
	ASIndexListerExpansion
}

// aSIndexLister implements the ASIndexLister interface.
type aSIndexLister struct {
	indexer cache.Indexer
}

// NewASIndexLister returns a new ASIndexLister.
func NewASIndexLister(indexer cache.Indexer) ASIndexLister {
	return &aSIndexLister{indexer: indexer}
}

// List lists all ASIndexes in the indexer.
func (s *aSIndexLister) List(selector labels.Selector) (ret []*v1alpha1.ASIndex, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ASIndex))
	})
	return ret, err
}

// ASIndexes returns an object that can list and get ASIndexes.
func (s *aSIndexLister) ASIndexes(namespace string) ASIndexNamespaceLister {
	return aSIndexNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ASIndexNamespaceLister helps list and get ASIndexes.
// All objects returned here must be treated as read-only.
type ASIndexNamespaceLister interface {
	// List lists all ASIndexes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ASIndex, err error)
	// Get retrieves the ASIndex from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ASIndex, error)
	ASIndexNamespaceListerExpansion
}

// aSIndexNamespaceLister implements the ASIndexNamespaceLister
// interface.
type aSIndexNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ASIndexes in the indexer for a given namespace.
func (s aSIndexNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ASIndex, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ASIndex))
	})
	return ret, err
}

// Get retrieves the ASIndex from the indexer for a given namespace and name.
func (s aSIndexNamespaceLister) Get(name string) (*v1alpha1.ASIndex, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("asindex"), name)
	}
	return obj.(*v1alpha1.ASIndex), nil
}
