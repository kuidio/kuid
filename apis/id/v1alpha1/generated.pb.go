/*
Copyright 2024 Nokia.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/kuidio/kuid/apis/id/v1alpha1/generated.proto

package v1alpha1

import (
	fmt "fmt"

	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"

	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func (m *ClusterID) Reset()      { *m = ClusterID{} }
func (*ClusterID) ProtoMessage() {}
func (*ClusterID) Descriptor() ([]byte, []int) {
	return fileDescriptor_858ff7e48e87ca70, []int{0}
}
func (m *ClusterID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ClusterID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterID.Merge(m, src)
}
func (m *ClusterID) XXX_Size() int {
	return m.Size()
}
func (m *ClusterID) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterID.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterID proto.InternalMessageInfo

func (m *EndpointID) Reset()      { *m = EndpointID{} }
func (*EndpointID) ProtoMessage() {}
func (*EndpointID) Descriptor() ([]byte, []int) {
	return fileDescriptor_858ff7e48e87ca70, []int{1}
}
func (m *EndpointID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndpointID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EndpointID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndpointID.Merge(m, src)
}
func (m *EndpointID) XXX_Size() int {
	return m.Size()
}
func (m *EndpointID) XXX_DiscardUnknown() {
	xxx_messageInfo_EndpointID.DiscardUnknown(m)
}

var xxx_messageInfo_EndpointID proto.InternalMessageInfo

func (m *NodeID) Reset()      { *m = NodeID{} }
func (*NodeID) ProtoMessage() {}
func (*NodeID) Descriptor() ([]byte, []int) {
	return fileDescriptor_858ff7e48e87ca70, []int{2}
}
func (m *NodeID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodeID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeID.Merge(m, src)
}
func (m *NodeID) XXX_Size() int {
	return m.Size()
}
func (m *NodeID) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeID.DiscardUnknown(m)
}

var xxx_messageInfo_NodeID proto.InternalMessageInfo

func (m *PartitionAdaptorID) Reset()      { *m = PartitionAdaptorID{} }
func (*PartitionAdaptorID) ProtoMessage() {}
func (*PartitionAdaptorID) Descriptor() ([]byte, []int) {
	return fileDescriptor_858ff7e48e87ca70, []int{3}
}
func (m *PartitionAdaptorID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PartitionAdaptorID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PartitionAdaptorID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartitionAdaptorID.Merge(m, src)
}
func (m *PartitionAdaptorID) XXX_Size() int {
	return m.Size()
}
func (m *PartitionAdaptorID) XXX_DiscardUnknown() {
	xxx_messageInfo_PartitionAdaptorID.DiscardUnknown(m)
}

var xxx_messageInfo_PartitionAdaptorID proto.InternalMessageInfo

func (m *PartitionAttachmentID) Reset()      { *m = PartitionAttachmentID{} }
func (*PartitionAttachmentID) ProtoMessage() {}
func (*PartitionAttachmentID) Descriptor() ([]byte, []int) {
	return fileDescriptor_858ff7e48e87ca70, []int{4}
}
func (m *PartitionAttachmentID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PartitionAttachmentID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PartitionAttachmentID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartitionAttachmentID.Merge(m, src)
}
func (m *PartitionAttachmentID) XXX_Size() int {
	return m.Size()
}
func (m *PartitionAttachmentID) XXX_DiscardUnknown() {
	xxx_messageInfo_PartitionAttachmentID.DiscardUnknown(m)
}

var xxx_messageInfo_PartitionAttachmentID proto.InternalMessageInfo

func (m *PartitionClusterID) Reset()      { *m = PartitionClusterID{} }
func (*PartitionClusterID) ProtoMessage() {}
func (*PartitionClusterID) Descriptor() ([]byte, []int) {
	return fileDescriptor_858ff7e48e87ca70, []int{5}
}
func (m *PartitionClusterID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PartitionClusterID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PartitionClusterID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartitionClusterID.Merge(m, src)
}
func (m *PartitionClusterID) XXX_Size() int {
	return m.Size()
}
func (m *PartitionClusterID) XXX_DiscardUnknown() {
	xxx_messageInfo_PartitionClusterID.DiscardUnknown(m)
}

var xxx_messageInfo_PartitionClusterID proto.InternalMessageInfo

func (m *PartitionEndpointID) Reset()      { *m = PartitionEndpointID{} }
func (*PartitionEndpointID) ProtoMessage() {}
func (*PartitionEndpointID) Descriptor() ([]byte, []int) {
	return fileDescriptor_858ff7e48e87ca70, []int{6}
}
func (m *PartitionEndpointID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PartitionEndpointID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PartitionEndpointID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartitionEndpointID.Merge(m, src)
}
func (m *PartitionEndpointID) XXX_Size() int {
	return m.Size()
}
func (m *PartitionEndpointID) XXX_DiscardUnknown() {
	xxx_messageInfo_PartitionEndpointID.DiscardUnknown(m)
}

var xxx_messageInfo_PartitionEndpointID proto.InternalMessageInfo

func (m *PartitionNodeID) Reset()      { *m = PartitionNodeID{} }
func (*PartitionNodeID) ProtoMessage() {}
func (*PartitionNodeID) Descriptor() ([]byte, []int) {
	return fileDescriptor_858ff7e48e87ca70, []int{7}
}
func (m *PartitionNodeID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PartitionNodeID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PartitionNodeID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartitionNodeID.Merge(m, src)
}
func (m *PartitionNodeID) XXX_Size() int {
	return m.Size()
}
func (m *PartitionNodeID) XXX_DiscardUnknown() {
	xxx_messageInfo_PartitionNodeID.DiscardUnknown(m)
}

var xxx_messageInfo_PartitionNodeID proto.InternalMessageInfo

func (m *PartitionPortID) Reset()      { *m = PartitionPortID{} }
func (*PartitionPortID) ProtoMessage() {}
func (*PartitionPortID) Descriptor() ([]byte, []int) {
	return fileDescriptor_858ff7e48e87ca70, []int{8}
}
func (m *PartitionPortID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PartitionPortID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PartitionPortID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartitionPortID.Merge(m, src)
}
func (m *PartitionPortID) XXX_Size() int {
	return m.Size()
}
func (m *PartitionPortID) XXX_DiscardUnknown() {
	xxx_messageInfo_PartitionPortID.DiscardUnknown(m)
}

var xxx_messageInfo_PartitionPortID proto.InternalMessageInfo

func (m *PartitionProviderEndpointID) Reset()      { *m = PartitionProviderEndpointID{} }
func (*PartitionProviderEndpointID) ProtoMessage() {}
func (*PartitionProviderEndpointID) Descriptor() ([]byte, []int) {
	return fileDescriptor_858ff7e48e87ca70, []int{9}
}
func (m *PartitionProviderEndpointID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PartitionProviderEndpointID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PartitionProviderEndpointID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartitionProviderEndpointID.Merge(m, src)
}
func (m *PartitionProviderEndpointID) XXX_Size() int {
	return m.Size()
}
func (m *PartitionProviderEndpointID) XXX_DiscardUnknown() {
	xxx_messageInfo_PartitionProviderEndpointID.DiscardUnknown(m)
}

var xxx_messageInfo_PartitionProviderEndpointID proto.InternalMessageInfo

func (m *PartitionProviderNodeID) Reset()      { *m = PartitionProviderNodeID{} }
func (*PartitionProviderNodeID) ProtoMessage() {}
func (*PartitionProviderNodeID) Descriptor() ([]byte, []int) {
	return fileDescriptor_858ff7e48e87ca70, []int{10}
}
func (m *PartitionProviderNodeID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PartitionProviderNodeID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PartitionProviderNodeID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartitionProviderNodeID.Merge(m, src)
}
func (m *PartitionProviderNodeID) XXX_Size() int {
	return m.Size()
}
func (m *PartitionProviderNodeID) XXX_DiscardUnknown() {
	xxx_messageInfo_PartitionProviderNodeID.DiscardUnknown(m)
}

var xxx_messageInfo_PartitionProviderNodeID proto.InternalMessageInfo

func (m *SiteID) Reset()      { *m = SiteID{} }
func (*SiteID) ProtoMessage() {}
func (*SiteID) Descriptor() ([]byte, []int) {
	return fileDescriptor_858ff7e48e87ca70, []int{11}
}
func (m *SiteID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SiteID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SiteID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SiteID.Merge(m, src)
}
func (m *SiteID) XXX_Size() int {
	return m.Size()
}
func (m *SiteID) XXX_DiscardUnknown() {
	xxx_messageInfo_SiteID.DiscardUnknown(m)
}

var xxx_messageInfo_SiteID proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ClusterID)(nil), "github.com.kuidio.kuid.apis.id.v1alpha1.ClusterID")
	proto.RegisterType((*EndpointID)(nil), "github.com.kuidio.kuid.apis.id.v1alpha1.EndpointID")
	proto.RegisterType((*NodeID)(nil), "github.com.kuidio.kuid.apis.id.v1alpha1.NodeID")
	proto.RegisterType((*PartitionAdaptorID)(nil), "github.com.kuidio.kuid.apis.id.v1alpha1.PartitionAdaptorID")
	proto.RegisterType((*PartitionAttachmentID)(nil), "github.com.kuidio.kuid.apis.id.v1alpha1.PartitionAttachmentID")
	proto.RegisterType((*PartitionClusterID)(nil), "github.com.kuidio.kuid.apis.id.v1alpha1.PartitionClusterID")
	proto.RegisterType((*PartitionEndpointID)(nil), "github.com.kuidio.kuid.apis.id.v1alpha1.PartitionEndpointID")
	proto.RegisterType((*PartitionNodeID)(nil), "github.com.kuidio.kuid.apis.id.v1alpha1.PartitionNodeID")
	proto.RegisterType((*PartitionPortID)(nil), "github.com.kuidio.kuid.apis.id.v1alpha1.PartitionPortID")
	proto.RegisterType((*PartitionProviderEndpointID)(nil), "github.com.kuidio.kuid.apis.id.v1alpha1.PartitionProviderEndpointID")
	proto.RegisterType((*PartitionProviderNodeID)(nil), "github.com.kuidio.kuid.apis.id.v1alpha1.PartitionProviderNodeID")
	proto.RegisterType((*SiteID)(nil), "github.com.kuidio.kuid.apis.id.v1alpha1.SiteID")
}

func init() {
	proto.RegisterFile("github.com/kuidio/kuid/apis/id/v1alpha1/generated.proto", fileDescriptor_858ff7e48e87ca70)
}

var fileDescriptor_858ff7e48e87ca70 = []byte{
	// 756 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x56, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0x8d, 0x9d, 0x34, 0x89, 0xa7, 0xed, 0xd7, 0x0f, 0x03, 0xaa, 0x05, 0xc8, 0x89, 0x2c, 0x95,
	0xb6, 0x02, 0x6c, 0x95, 0x0d, 0x5d, 0x82, 0x09, 0x8b, 0x2c, 0x8a, 0xaa, 0x29, 0x12, 0x12, 0xbb,
	0x69, 0x3c, 0x4d, 0x47, 0xc4, 0x19, 0xcb, 0x99, 0x54, 0xea, 0x0e, 0x89, 0x07, 0x80, 0xe7, 0x40,
	0x62, 0xc1, 0x03, 0xc0, 0xba, 0xec, 0xba, 0xec, 0xaa, 0xa2, 0x46, 0x62, 0xcb, 0x1b, 0x20, 0x34,
	0xe3, 0xf1, 0x4f, 0x4d, 0x22, 0xac, 0x52, 0x44, 0x61, 0xe5, 0x8c, 0xef, 0xb9, 0x77, 0xce, 0x3d,
	0xf7, 0x27, 0x06, 0xf7, 0xfa, 0x84, 0xed, 0x8e, 0xb7, 0xed, 0x1e, 0xf5, 0x9d, 0xe7, 0x63, 0xe2,
	0x11, 0x2a, 0x1e, 0x0e, 0x0a, 0xc8, 0xc8, 0x21, 0x9e, 0xb3, 0xb7, 0x86, 0x06, 0xc1, 0x2e, 0x5a,
	0x73, 0xfa, 0x78, 0x88, 0x43, 0xc4, 0xb0, 0x67, 0x07, 0x21, 0x65, 0x54, 0x5f, 0xce, 0x1c, 0xed,
	0xd8, 0x51, 0x3c, 0x6c, 0xee, 0x68, 0x13, 0xcf, 0x4e, 0x1c, 0xaf, 0xdd, 0xc9, 0xdd, 0xd0, 0xa7,
	0x7d, 0xea, 0x08, 0xff, 0xed, 0xf1, 0x8e, 0x38, 0x89, 0x83, 0xf8, 0x15, 0xc7, 0xb5, 0x5e, 0x29,
	0x40, 0x7b, 0x38, 0x18, 0x8f, 0x18, 0x0e, 0xbb, 0x1d, 0xfd, 0x29, 0xa8, 0x8f, 0x08, 0xc3, 0xdd,
	0x8e, 0xa1, 0xb4, 0x95, 0x95, 0xd9, 0xbb, 0x8e, 0x5d, 0xf2, 0x5a, 0x7b, 0x4b, 0xb8, 0xb9, 0xff,
	0x1d, 0x1c, 0xb7, 0x2a, 0xd1, 0x71, 0xab, 0x1e, 0x9f, 0xa1, 0x0c, 0xa7, 0xaf, 0x82, 0x46, 0x2f,
	0xbe, 0xc5, 0x50, 0xdb, 0xca, 0x8a, 0xe6, 0x2e, 0x48, 0x60, 0x43, 0x5e, 0x0e, 0x13, 0xbb, 0xf5,
	0x4e, 0x05, 0xe0, 0xd1, 0xd0, 0x0b, 0x28, 0x19, 0xb2, 0x98, 0xd2, 0x90, 0x7a, 0x67, 0xa1, 0xf4,
	0x58, 0xb8, 0x65, 0x94, 0xe2, 0x33, 0x94, 0xe1, 0xf4, 0x5b, 0x40, 0xf3, 0xa9, 0x37, 0x1e, 0x60,
	0x17, 0xed, 0x0b, 0x52, 0xf3, 0xee, 0x7c, 0x74, 0xdc, 0xd2, 0x36, 0x92, 0x97, 0x30, 0xb3, 0xeb,
	0x16, 0xa8, 0xc7, 0x07, 0xa3, 0x2a, 0x90, 0x80, 0x07, 0x8c, 0x91, 0x50, 0x5a, 0xf4, 0x36, 0xa8,
	0x05, 0x34, 0x64, 0x46, 0x4d, 0x20, 0xe6, 0xe4, 0xb5, 0xb5, 0x4d, 0x1a, 0x32, 0x28, 0x2c, 0x5c,
	0x05, 0xe4, 0xa1, 0x80, 0xd1, 0xd0, 0x98, 0x39, 0xad, 0xc2, 0x83, 0xf8, 0x35, 0x4c, 0xec, 0xfa,
	0x6d, 0xd0, 0xc4, 0x52, 0x04, 0xa3, 0x2e, 0x02, 0xfe, 0x2f, 0xb1, 0xcd, 0x44, 0x1c, 0x98, 0x22,
	0xac, 0x97, 0x0a, 0x90, 0xe9, 0xfd, 0xbe, 0x12, 0xb6, 0x41, 0x8d, 0x2b, 0x27, 0xeb, 0x97, 0xa6,
	0xc7, 0xaf, 0x85, 0xc2, 0x62, 0xbd, 0x51, 0x80, 0xbe, 0x89, 0x42, 0x46, 0x18, 0xa1, 0x43, 0x99,
	0x51, 0xb7, 0xa3, 0x93, 0x42, 0x05, 0xd7, 0x4b, 0x33, 0x4a, 0x83, 0x71, 0x0d, 0xbb, 0x1d, 0x77,
	0x51, 0x5e, 0xba, 0x50, 0x30, 0xa4, 0x35, 0x2d, 0x2f, 0xb0, 0xf5, 0x41, 0x05, 0x57, 0x33, 0xb2,
	0x8c, 0xa1, 0xde, 0xae, 0x8f, 0x45, 0xc7, 0x39, 0x40, 0x0b, 0x12, 0x83, 0xa0, 0xac, 0xb9, 0x97,
	0x64, 0x18, 0x2d, 0xf5, 0x80, 0x19, 0x26, 0x27, 0xb9, 0x7a, 0xbe, 0x92, 0x2f, 0x65, 0x53, 0x53,
	0x15, 0x3c, 0x66, 0x27, 0x4d, 0x8c, 0x7e, 0x43, 0x56, 0xa6, 0x26, 0x30, 0xcd, 0xd3, 0x55, 0xe1,
	0x41, 0xf8, 0x73, 0x84, 0x99, 0xd4, 0x44, 0x04, 0xe1, 0x80, 0x2d, 0xcc, 0x60, 0x62, 0xe3, 0x59,
	0x93, 0x21, 0xc3, 0xe1, 0x0e, 0xea, 0x61, 0xd1, 0x71, 0xb9, 0xac, 0xbb, 0x89, 0x01, 0x66, 0x18,
	0xeb, 0x63, 0xbe, 0xda, 0xd9, 0x0a, 0xb9, 0x38, 0xea, 0xad, 0x16, 0xd5, 0x9b, 0xbe, 0x73, 0xbe,
	0xa8, 0xe0, 0x72, 0x4a, 0x2e, 0xb7, 0x7c, 0xce, 0xa1, 0x75, 0xe5, 0x16, 0xfa, 0xb1, 0x75, 0xff,
	0xfc, 0x3a, 0x5a, 0x2a, 0x4e, 0xcb, 0xec, 0xaf, 0xaf, 0x22, 0xd1, 0x8c, 0xc8, 0xc7, 0x46, 0x23,
	0xd7, 0x8c, 0xc8, 0xe7, 0xcd, 0x88, 0x7c, 0x6c, 0xbd, 0x57, 0x40, 0x51, 0x81, 0x0b, 0xd4, 0x31,
	0xc9, 0x8a, 0xab, 0x4e, 0x5d, 0x71, 0x5f, 0xf3, 0xfc, 0xe3, 0xe5, 0xf3, 0x6f, 0x37, 0x89, 0xf5,
	0x4d, 0x05, 0xd7, 0xb3, 0x8c, 0x43, 0xba, 0x47, 0x3c, 0x1c, 0xe6, 0x46, 0x64, 0x3f, 0xcd, 0x3e,
	0x2e, 0xc6, 0xfd, 0x33, 0x6c, 0x77, 0x19, 0x55, 0xaa, 0xd0, 0x92, 0x2c, 0x16, 0xa7, 0x00, 0x26,
	0xab, 0x51, 0x2d, 0xad, 0x46, 0xed, 0xa7, 0x6a, 0xcc, 0x94, 0x19, 0x99, 0x7a, 0xc9, 0x91, 0x69,
	0x94, 0x1e, 0x99, 0xe6, 0xc4, 0x91, 0x79, 0xab, 0x82, 0x69, 0x4a, 0xfc, 0x4d, 0xa3, 0xc3, 0x35,
	0x09, 0x24, 0x7b, 0xf9, 0x4f, 0x95, 0x6a, 0x92, 0x64, 0x05, 0x53, 0x84, 0xbe, 0x0e, 0xe6, 0x82,
	0x01, 0x62, 0x3b, 0x34, 0xf4, 0x9f, 0xec, 0x07, 0x58, 0x2e, 0xa8, 0x2b, 0xd2, 0x63, 0x6e, 0x33,
	0x67, 0x83, 0xa7, 0x90, 0x16, 0x04, 0x92, 0x9b, 0x7e, 0x13, 0xd4, 0x43, 0xdc, 0xcf, 0xa4, 0x49,
	0xb9, 0x43, 0xf1, 0x16, 0x4a, 0x2b, 0xe7, 0xce, 0xb3, 0x28, 0x7e, 0xd9, 0xf0, 0x28, 0x50, 0x58,
	0xdc, 0x8d, 0x83, 0x13, 0xb3, 0x72, 0x78, 0x62, 0x56, 0x8e, 0x4e, 0xcc, 0xca, 0x8b, 0xc8, 0x54,
	0x0e, 0x22, 0x53, 0x39, 0x8c, 0x4c, 0xe5, 0x28, 0x32, 0x95, 0x4f, 0x91, 0xa9, 0xbc, 0xfe, 0x6c,
	0x56, 0x9e, 0x2d, 0x97, 0xfc, 0xb8, 0xff, 0x1e, 0x00, 0x00, 0xff, 0xff, 0xff, 0xde, 0x8e, 0xe6,
	0x06, 0x0c, 0x00, 0x00,
}

func (m *ClusterID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Cluster)
	copy(dAtA[i:], m.Cluster)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Cluster)))
	i--
	dAtA[i] = 0x12
	{
		size, err := m.SiteID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EndpointID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndpointID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndpointID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.Endpoint))
	i--
	dAtA[i] = 0x30
	i -= len(m.Adaptor)
	copy(dAtA[i:], m.Adaptor)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Adaptor)))
	i--
	dAtA[i] = 0x2a
	i = encodeVarintGenerated(dAtA, i, uint64(m.Port))
	i--
	dAtA[i] = 0x20
	if m.Module != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.Module))
		i--
		dAtA[i] = 0x18
	}
	if m.ModuleBay != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.ModuleBay))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.NodeID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *NodeID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Node)
	copy(dAtA[i:], m.Node)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Node)))
	i--
	dAtA[i] = 0x12
	{
		size, err := m.SiteID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PartitionAdaptorID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartitionAdaptorID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartitionAdaptorID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Adaptor)
	copy(dAtA[i:], m.Adaptor)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Adaptor)))
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.PartitionPortID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PartitionAttachmentID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartitionAttachmentID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartitionAttachmentID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Interface)
	copy(dAtA[i:], m.Interface)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Interface)))
	i--
	dAtA[i] = 0x32
	if m.NodeSet != nil {
		i -= len(*m.NodeSet)
		copy(dAtA[i:], *m.NodeSet)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.NodeSet)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Node != nil {
		i -= len(*m.Node)
		copy(dAtA[i:], *m.Node)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Node)))
		i--
		dAtA[i] = 0x22
	}
	if m.Cluster != nil {
		i -= len(*m.Cluster)
		copy(dAtA[i:], *m.Cluster)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Cluster)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.SiteID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	i -= len(m.Partition)
	copy(dAtA[i:], m.Partition)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Partition)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PartitionClusterID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartitionClusterID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartitionClusterID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Cluster)
	copy(dAtA[i:], m.Cluster)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Cluster)))
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.SiteID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	i -= len(m.Partition)
	copy(dAtA[i:], m.Partition)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Partition)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PartitionEndpointID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartitionEndpointID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartitionEndpointID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x3a
	}
	i = encodeVarintGenerated(dAtA, i, uint64(m.Endpoint))
	i--
	dAtA[i] = 0x30
	if m.Adaptor != nil {
		i -= len(*m.Adaptor)
		copy(dAtA[i:], *m.Adaptor)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Adaptor)))
		i--
		dAtA[i] = 0x2a
	}
	i = encodeVarintGenerated(dAtA, i, uint64(m.Port))
	i--
	dAtA[i] = 0x20
	if m.Module != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.Module))
		i--
		dAtA[i] = 0x18
	}
	if m.ModuleBay != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.ModuleBay))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.PartitionNodeID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PartitionNodeID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartitionNodeID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartitionNodeID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Node)
	copy(dAtA[i:], m.Node)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Node)))
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.SiteID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	i -= len(m.Partition)
	copy(dAtA[i:], m.Partition)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Partition)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PartitionPortID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartitionPortID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartitionPortID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.Port))
	i--
	dAtA[i] = 0x20
	if m.Module != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.Module))
		i--
		dAtA[i] = 0x18
	}
	if m.ModuleBay != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.ModuleBay))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.PartitionNodeID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PartitionProviderEndpointID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartitionProviderEndpointID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartitionProviderEndpointID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x42
	}
	i = encodeVarintGenerated(dAtA, i, uint64(m.Endpoint))
	i--
	dAtA[i] = 0x38
	if m.Adaptor != nil {
		i -= len(*m.Adaptor)
		copy(dAtA[i:], *m.Adaptor)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Adaptor)))
		i--
		dAtA[i] = 0x32
	}
	i = encodeVarintGenerated(dAtA, i, uint64(m.Port))
	i--
	dAtA[i] = 0x28
	if m.Module != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.Module))
		i--
		dAtA[i] = 0x20
	}
	if m.ModuleBay != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.ModuleBay))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.PartitionProviderNodeID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}

func (m *PartitionProviderNodeID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartitionProviderNodeID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartitionProviderNodeID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.PlatformType)
	copy(dAtA[i:], m.PlatformType)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.PlatformType)))
	i--
	dAtA[i] = 0x2a
	i -= len(m.Provider)
	copy(dAtA[i:], m.Provider)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Provider)))
	i--
	dAtA[i] = 0x22
	i -= len(m.Node)
	copy(dAtA[i:], m.Node)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Node)))
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.SiteID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	i -= len(m.Partition)
	copy(dAtA[i:], m.Partition)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Partition)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *SiteID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SiteID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SiteID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Site)
	copy(dAtA[i:], m.Site)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Site)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Region)
	copy(dAtA[i:], m.Region)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Region)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintGenerated(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenerated(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ClusterID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SiteID.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Cluster)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *EndpointID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.NodeID.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if m.ModuleBay != nil {
		n += 1 + sovGenerated(uint64(*m.ModuleBay))
	}
	if m.Module != nil {
		n += 1 + sovGenerated(uint64(*m.Module))
	}
	n += 1 + sovGenerated(uint64(m.Port))
	l = len(m.Adaptor)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.Endpoint))
	return n
}

func (m *NodeID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SiteID.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Node)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *PartitionAdaptorID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PartitionPortID.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Adaptor)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *PartitionAttachmentID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Partition)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.SiteID.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if m.Cluster != nil {
		l = len(*m.Cluster)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Node != nil {
		l = len(*m.Node)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.NodeSet != nil {
		l = len(*m.NodeSet)
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.Interface)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *PartitionClusterID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Partition)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.SiteID.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Cluster)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *PartitionEndpointID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PartitionNodeID.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if m.ModuleBay != nil {
		n += 1 + sovGenerated(uint64(*m.ModuleBay))
	}
	if m.Module != nil {
		n += 1 + sovGenerated(uint64(*m.Module))
	}
	n += 1 + sovGenerated(uint64(m.Port))
	if m.Adaptor != nil {
		l = len(*m.Adaptor)
		n += 1 + l + sovGenerated(uint64(l))
	}
	n += 1 + sovGenerated(uint64(m.Endpoint))
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *PartitionNodeID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Partition)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.SiteID.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Node)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *PartitionPortID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PartitionNodeID.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if m.ModuleBay != nil {
		n += 1 + sovGenerated(uint64(*m.ModuleBay))
	}
	if m.Module != nil {
		n += 1 + sovGenerated(uint64(*m.Module))
	}
	n += 1 + sovGenerated(uint64(m.Port))
	return n
}

func (m *PartitionProviderEndpointID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PartitionProviderNodeID.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if m.ModuleBay != nil {
		n += 1 + sovGenerated(uint64(*m.ModuleBay))
	}
	if m.Module != nil {
		n += 1 + sovGenerated(uint64(*m.Module))
	}
	n += 1 + sovGenerated(uint64(m.Port))
	if m.Adaptor != nil {
		l = len(*m.Adaptor)
		n += 1 + l + sovGenerated(uint64(l))
	}
	n += 1 + sovGenerated(uint64(m.Endpoint))
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *PartitionProviderNodeID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Partition)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.SiteID.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Node)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Provider)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.PlatformType)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *SiteID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Region)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Site)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func sovGenerated(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenerated(x uint64) (n int) {
	return sovGenerated(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ClusterID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClusterID{`,
		`SiteID:` + strings.Replace(strings.Replace(this.SiteID.String(), "SiteID", "SiteID", 1), `&`, ``, 1) + `,`,
		`Cluster:` + fmt.Sprintf("%v", this.Cluster) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndpointID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndpointID{`,
		`NodeID:` + strings.Replace(strings.Replace(this.NodeID.String(), "NodeID", "NodeID", 1), `&`, ``, 1) + `,`,
		`ModuleBay:` + valueToStringGenerated(this.ModuleBay) + `,`,
		`Module:` + valueToStringGenerated(this.Module) + `,`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`Adaptor:` + fmt.Sprintf("%v", this.Adaptor) + `,`,
		`Endpoint:` + fmt.Sprintf("%v", this.Endpoint) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeID{`,
		`SiteID:` + strings.Replace(strings.Replace(this.SiteID.String(), "SiteID", "SiteID", 1), `&`, ``, 1) + `,`,
		`Node:` + fmt.Sprintf("%v", this.Node) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PartitionAdaptorID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PartitionAdaptorID{`,
		`PartitionPortID:` + strings.Replace(strings.Replace(this.PartitionPortID.String(), "PartitionPortID", "PartitionPortID", 1), `&`, ``, 1) + `,`,
		`Adaptor:` + fmt.Sprintf("%v", this.Adaptor) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PartitionAttachmentID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PartitionAttachmentID{`,
		`Partition:` + fmt.Sprintf("%v", this.Partition) + `,`,
		`SiteID:` + strings.Replace(strings.Replace(this.SiteID.String(), "SiteID", "SiteID", 1), `&`, ``, 1) + `,`,
		`Cluster:` + valueToStringGenerated(this.Cluster) + `,`,
		`Node:` + valueToStringGenerated(this.Node) + `,`,
		`NodeSet:` + valueToStringGenerated(this.NodeSet) + `,`,
		`Interface:` + fmt.Sprintf("%v", this.Interface) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PartitionClusterID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PartitionClusterID{`,
		`Partition:` + fmt.Sprintf("%v", this.Partition) + `,`,
		`SiteID:` + strings.Replace(strings.Replace(this.SiteID.String(), "SiteID", "SiteID", 1), `&`, ``, 1) + `,`,
		`Cluster:` + fmt.Sprintf("%v", this.Cluster) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PartitionEndpointID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PartitionEndpointID{`,
		`PartitionNodeID:` + strings.Replace(strings.Replace(this.PartitionNodeID.String(), "PartitionNodeID", "PartitionNodeID", 1), `&`, ``, 1) + `,`,
		`ModuleBay:` + valueToStringGenerated(this.ModuleBay) + `,`,
		`Module:` + valueToStringGenerated(this.Module) + `,`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`Adaptor:` + valueToStringGenerated(this.Adaptor) + `,`,
		`Endpoint:` + fmt.Sprintf("%v", this.Endpoint) + `,`,
		`Name:` + valueToStringGenerated(this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PartitionNodeID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PartitionNodeID{`,
		`Partition:` + fmt.Sprintf("%v", this.Partition) + `,`,
		`SiteID:` + strings.Replace(strings.Replace(this.SiteID.String(), "SiteID", "SiteID", 1), `&`, ``, 1) + `,`,
		`Node:` + fmt.Sprintf("%v", this.Node) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PartitionPortID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PartitionPortID{`,
		`PartitionNodeID:` + strings.Replace(strings.Replace(this.PartitionNodeID.String(), "PartitionNodeID", "PartitionNodeID", 1), `&`, ``, 1) + `,`,
		`ModuleBay:` + valueToStringGenerated(this.ModuleBay) + `,`,
		`Module:` + valueToStringGenerated(this.Module) + `,`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PartitionProviderEndpointID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PartitionProviderEndpointID{`,
		`PartitionProviderNodeID:` + strings.Replace(strings.Replace(this.PartitionProviderNodeID.String(), "PartitionProviderNodeID", "PartitionProviderNodeID", 1), `&`, ``, 1) + `,`,
		`ModuleBay:` + valueToStringGenerated(this.ModuleBay) + `,`,
		`Module:` + valueToStringGenerated(this.Module) + `,`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`Adaptor:` + valueToStringGenerated(this.Adaptor) + `,`,
		`Endpoint:` + fmt.Sprintf("%v", this.Endpoint) + `,`,
		`Name:` + valueToStringGenerated(this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PartitionProviderNodeID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PartitionProviderNodeID{`,
		`Partition:` + fmt.Sprintf("%v", this.Partition) + `,`,
		`SiteID:` + strings.Replace(strings.Replace(this.SiteID.String(), "SiteID", "SiteID", 1), `&`, ``, 1) + `,`,
		`Node:` + fmt.Sprintf("%v", this.Node) + `,`,
		`Provider:` + fmt.Sprintf("%v", this.Provider) + `,`,
		`PlatformType:` + fmt.Sprintf("%v", this.PlatformType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SiteID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SiteID{`,
		`Region:` + fmt.Sprintf("%v", this.Region) + `,`,
		`Site:` + fmt.Sprintf("%v", this.Site) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGenerated(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ClusterID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SiteID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cluster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndpointID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndpointID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndpointID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NodeID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleBay", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ModuleBay = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Module = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Adaptor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Adaptor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			m.Endpoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Endpoint |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SiteID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PartitionAdaptorID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartitionAdaptorID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartitionAdaptorID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionPortID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PartitionPortID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Adaptor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Adaptor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PartitionAttachmentID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartitionAttachmentID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartitionAttachmentID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Partition", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Partition = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SiteID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Cluster = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Node = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeSet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NodeSet = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interface", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Interface = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PartitionClusterID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartitionClusterID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartitionClusterID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Partition", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Partition = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SiteID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cluster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PartitionEndpointID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartitionEndpointID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartitionEndpointID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionNodeID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PartitionNodeID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleBay", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ModuleBay = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Module = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Adaptor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Adaptor = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			m.Endpoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Endpoint |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PartitionNodeID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartitionNodeID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartitionNodeID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Partition", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Partition = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SiteID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PartitionPortID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartitionPortID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartitionPortID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionNodeID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PartitionNodeID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleBay", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ModuleBay = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Module = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PartitionProviderEndpointID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartitionProviderEndpointID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartitionProviderEndpointID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionProviderNodeID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PartitionProviderNodeID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleBay", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ModuleBay = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Module = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Adaptor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Adaptor = &s
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			m.Endpoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Endpoint |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PartitionProviderNodeID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartitionProviderNodeID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartitionProviderNodeID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Partition", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Partition = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SiteID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatformType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlatformType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SiteID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SiteID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SiteID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Site = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenerated(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenerated
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenerated
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenerated
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenerated        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenerated          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenerated = fmt.Errorf("proto: unexpected end of group")
)
